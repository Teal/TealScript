{
    "TypeNode": {
        "indent": 0,
        "fields": [],
        "params": [
            {
                "name": "precedence",
                "comment": "允许解析的最低操作符优先级",
                "value": "tokens.Precedence.any",
                "optional": false
            }
        ],
        "name": "TypeNode",
        "comment": "类型节点",
        "codes": [
            "let result: TypeNode;",
            "if (tokens.isPredefinedType(peek)) {",
            "\tresult = this.parsePredefinedTypeNode();",
            "} else {",
            "\tswitch (peek) {",
            "\t\tcase '(':",
            "\t\t\tresult = this.parseFunctionOrParenthesizedTypeNode();",
            "\t\t\tbreak;",
            "\t\tcase '[':",
            "\t\t\tresult = this.parseTupleTypeNode();",
            "\t\t\tbreak;",
            "\t\tcase '{':",
            "\t\t\tresult = this.parseObjectTypeNode();",
            "\t\t\tbreak;",
            "\t\tcase 'new':",
            "\t\t\treturn this.parseConstructorTypeNode();",
            "\t\tcase '<':",
            "\t\t\treturn FunctionTypeNode(TypeParameters, Parameters);",
            "\t\tcase 'typeof':",
            "\t\t\tresult = this.parseTypeQueryNode();",
            "\t\t\tbreak;",
            "\t\tcase '=>':",
            "\t\t\treturn FunctionTypeNode();",
            "\t\tcase '<numericLiteral>':",
            "\t\tcase '<stringLiteral>':",
            "\t\tcase 'true':",
            "\t\tcase 'false':",
            "\t\t\tresult = this.parseLiteralTypeNode();",
            "\t\t\tbreak;",
            "\t\tdefault:",
            "\t\t\tresult = this.parseGenericTypeOrTypeReferenceNode();",
            "\t\t\tbreak;",
            "\t}",
            "}",
            "while (tokens.getPrecedence(peek) >= precedence) {",
            "\tswitch (peek) {",
            "\t\tcase '.':",
            "\t\t\tresult = QualifiedNameTypeNode(result);",
            "\t\t\tcontinue;",
            "\t\tcase '[':",
            "\t\t\tif (sameLine) {",
            "\t\t\t\tresult = ArrayTypeNode(result);",
            "\t\t\t}",
            "\t\t\tcontinue;",
            "\t\tcase '&':",
            "\t\tcase '|':",
            "\t\tcase 'is':",
            "\t\t\tresult = BinaryTypeNode(result);",
            "\t\t\tcontinue;",
            "\t}",
            "\treturn result;",
            "}"
        ],
        "extend": "Node",
        "abstract": true,
        "list": null,
        "alias": ""
    },
    "PredefinedTypeNode": {
        "indent": 2,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "type",
                "type": "number",
                "comment": " 类型"
            }
        ],
        "params": [],
        "name": "PredefinedTypeNode",
        "comment": "内置类型节点(`number`、`string`、...)",
        "codes": [
            "_.type = this.lexer.read(); // any、number、boolean、string、symbol、void、never、this、null、undefined、char、byte、int、long、short、uint、ulong、ushort、float、double、*、?"
        ],
        "extend": "TypeNode",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "FunctionOrParenthesizedTypeNode": {
        "indent": 4,
        "fields": [],
        "params": [],
        "name": "FunctionOrParenthesizedTypeNode",
        "comment": "函数或括号类型节点(`() => void`、`(x)`)",
        "codes": [
            "const savedState = lexer.stashSave();",
            "const parameters = Parameters;",
            "if (peek === '=>' || peek === ':') {",
            "\tlexer.stashClear(savedState);",
            "\treturn FunctionTypeNode(undefined, parameters);",
            "}",
            "lexer.stashRestore(savedState);",
            "return this.parseParenthesizedTypeNode();"
        ],
        "extend": "TypeNode",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ParenthesizedTypeNode": {
        "indent": 5,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "openParenToken",
                "type": "number",
                "comment": "标记 '(' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "body",
                "type": "TypeNode",
                "comment": " 主体部分"
            },
            {
                "optional": false,
                "inline": "",
                "name": "closeParenToken",
                "type": "number",
                "comment": "标记 ')' 的位置"
            }
        ],
        "params": [],
        "name": "ParenthesizedTypeNode",
        "comment": "括号类型节点(`(number)`)",
        "codes": [
            "_.openParenToken = readToken(tokens.TokenType.openParen);",
            "_.body = TypeNode();",
            "_.closeParenToken = readToken(tokens.TokenType.closeParen);"
        ],
        "extend": "TypeNode",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "FunctionTypeNode": {
        "indent": 4,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>"
            },
            {
                "inline": "",
                "optional": true,
                "name": "parameters",
                "comment": "参数部分",
                "type": "nodes.NodeList<ParameterDeclaration>"
            },
            {
                "optional": false,
                "inline": "",
                "name": "equalsGreaterThanToken",
                "type": "number",
                "comment": "标记 '=>' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "return",
                "type": "TypeNode"
            }
        ],
        "params": [
            {
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>",
                "value": "",
                "optional": true
            },
            {
                "name": "parameters",
                "type": "nodes.NodeList<ParameterDeclaration>",
                "comment": "参数部分",
                "value": "",
                "optional": true
            }
        ],
        "name": "FunctionTypeNode",
        "comment": "函数类型节点(`(x: number) => void`)",
        "codes": [
            "if (typeParameters != undefined) {",
            "\t_.typeParameters = typeParameters;",
            "}",
            "if (parameters != undefined) {",
            "\t_.parameters = parameters;",
            "}",
            "_.equalsGreaterThanToken = readToken(tokens.TokenType.equalsGreaterThan);",
            "_.return = TypeNode();"
        ],
        "extend": "TypeNode",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "TupleTypeNode": {
        "indent": 4,
        "fields": [],
        "params": [],
        "name": "TupleTypeNode",
        "comment": "元祖类型节点(`[string, number]`)",
        "codes": [
            "return this.parseDelimitedList(TupleTypeElement, '[', ']', true, tokens.isTypeNodeStart);"
        ],
        "extend": "TypeNode",
        "abstract": false,
        "list": {
            "element": "TupleTypeElement",
            "allowEmpty": true,
            "open": "'['",
            "close": "']'",
            "seperator": "','",
            "continue": "tokens.isTypeNodeStart"
        },
        "alias": ""
    },
    "TupleTypeElement": {
        "indent": 5,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "value",
                "type": "TypeNode",
                "comment": " 值部分"
            }
        ],
        "params": [],
        "name": "TupleTypeElement",
        "comment": "元祖类型节点元素(`x`)",
        "codes": [
            "_.value = TypeNode(tokens.Precedence.assignment);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ObjectTypeNode": {
        "indent": 4,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "elements",
                "type": "nodes.NodeList<TypeMemberSignature>",
                "comment": " 元素列表"
            }
        ],
        "params": [],
        "name": "ObjectTypeNode",
        "comment": "对象类型节点(`{x: number}`)",
        "codes": [
            "_.elements = this.parseNodeList(TypeMemberSignature, '{', '}')"
        ],
        "extend": "TypeNode",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ConstructorTypeNode": {
        "indent": 4,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "newToken",
                "type": "number",
                "comment": "标记 'new' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>"
            },
            {
                "optional": false,
                "inline": "",
                "name": "parameters",
                "type": "nodes.NodeList<ParameterDeclaration>",
                "comment": "参数部分"
            },
            {
                "optional": false,
                "inline": "",
                "name": "equalsGreaterThanToken",
                "type": "number",
                "comment": "标记 '=>' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "return",
                "type": "TypeNode"
            }
        ],
        "params": [],
        "name": "ConstructorTypeNode",
        "comment": "构造函数类型节点(`new () => void`)",
        "codes": [
            "_.newToken = readToken(tokens.TokenType.new);",
            "if (peek === '<') {",
            "\t_.typeParameters = TypeParameters();",
            "}",
            "_.parameters = Parameters();",
            "_.equalsGreaterThanToken = readToken(tokens.TokenType.equalsGreaterThan);",
            "_.return = TypeNode();"
        ],
        "extend": "TypeNode",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "TypeQueryNode": {
        "indent": 4,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "typeofToken",
                "type": "number",
                "comment": "标记 'typeof' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "operand",
                "type": "Expression",
                "comment": " 操作数"
            }
        ],
        "params": [],
        "name": "TypeQueryNode",
        "comment": "类型查询节点(`typeof x`)",
        "codes": [
            "_.typeofToken = readToken(tokens.TokenType.typeof);",
            "_.operand = Expression(tokens.Precedence.postfix);"
        ],
        "extend": "TypeNode",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "LiteralTypeNode": {
        "indent": 4,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "value",
                "type": "Expression",
                "comment": " 值部分"
            }
        ],
        "params": [],
        "name": "LiteralTypeNode",
        "comment": "字面量类型节点(`\"abc\"`、`true`)",
        "codes": [
            "_.value = Expression(tokens.Precedence.primary);"
        ],
        "extend": "TypeNode",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "GenericTypeOrTypeReferenceNode": {
        "indent": 4,
        "fields": [],
        "params": [],
        "name": "GenericTypeOrTypeReferenceNode",
        "comment": "泛型类型节点(`x<T>`)或类型引用节点(`x`)",
        "codes": [
            "const result = TypeReferenceNode;",
            "if (sameLine && peek === '<') {",
            "\treturn GenericTypeNode(result);",
            "}",
            "return result;"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "TypeReferenceNode": {
        "indent": 5,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "value",
                "type": "number",
                "comment": " 值部分"
            }
        ],
        "params": [],
        "name": "TypeReferenceNode",
        "comment": "类型引用节点(`x`)",
        "codes": [
            "if (tokens.isIdentifierName, tokens.isTypeNodeStart(peek)) {",
            "\t_.value = readToken(tokens.TokenType.identifier);",
            "} else {",
            "\terror(lexer.peek(), \"Type expected. Unexpected token '{0}'.\", tokens.getTokenName(peek));",
            "}"
        ],
        "extend": "TypeNode",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "GenericTypeNode": {
        "indent": 6,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "target",
                "comment": "目标部分",
                "type": "TypeReferenceNode"
            },
            {
                "optional": false,
                "inline": "",
                "name": "typeArguments",
                "type": "nodes.NodeList<TypeArgument>",
                "comment": " 类型参数部分"
            }
        ],
        "params": [
            {
                "name": "target",
                "type": "TypeReferenceNode",
                "comment": "目标部分",
                "value": "",
                "optional": false
            }
        ],
        "name": "GenericTypeNode",
        "comment": "泛型类型节点(`Array<number>`)",
        "codes": [
            "_.target = target;",
            "_.typeArguments = TypeArguments();"
        ],
        "extend": "TypeNode",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "QualifiedNameTypeNode": {
        "indent": 4,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "target",
                "comment": "目标部分",
                "type": "TypeNode"
            },
            {
                "optional": false,
                "inline": "",
                "name": "dotToken",
                "type": "number",
                "comment": "标记 '.' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "argument",
                "type": "Identifier",
                "comment": " 参数部分"
            }
        ],
        "params": [
            {
                "name": "target",
                "type": "TypeNode",
                "comment": "目标部分",
                "value": "",
                "optional": false
            }
        ],
        "name": "QualifiedNameTypeNode",
        "comment": "限定名称类型节点(`\"abc\"`、`true`)",
        "codes": [
            "_.target = target;",
            "_.dotToken = readToken(tokens.TokenType.dot);",
            "_.argument = Identifier(true);"
        ],
        "extend": "TypeNode",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ArrayTypeNode": {
        "indent": 5,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "target",
                "comment": "目标部分",
                "type": "TypeNode"
            },
            {
                "optional": false,
                "inline": "",
                "name": "openBracketToken",
                "type": "number",
                "comment": "标记 '[' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "closeBracketToken",
                "type": "number",
                "comment": "标记 ']' 的位置"
            }
        ],
        "params": [
            {
                "name": "target",
                "type": "TypeNode",
                "comment": "目标部分",
                "value": "",
                "optional": false
            }
        ],
        "name": "ArrayTypeNode",
        "comment": "数组类型节点(`T[]`)",
        "codes": [
            "_.target = target;",
            "_.openBracketToken = readToken(tokens.TokenType.openBracket);",
            "_.closeBracketToken = readToken(tokens.TokenType.closeBracket);"
        ],
        "extend": "TypeNode",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "BinaryTypeNode": {
        "indent": 4,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "left",
                "comment": "左值部分",
                "type": "TypeNode"
            },
            {
                "optional": false,
                "inline": "",
                "name": "operator",
                "type": "number",
                "comment": " 运算类型"
            },
            {
                "optional": false,
                "inline": "",
                "name": "right",
                "type": "TypeNode",
                "comment": " 右值部分"
            }
        ],
        "params": [
            {
                "name": "left",
                "type": "TypeNode",
                "comment": "左值部分",
                "value": "",
                "optional": false
            }
        ],
        "name": "BinaryTypeNode",
        "comment": "双目表达式(`x + y`、`x = y`、...)",
        "codes": [
            "_.left = left;",
            "_.operator = this.lexer.read(); // &、|、is",
            "_.right = TypeNode(tokens.getPrecedence(result.operator) + 1);"
        ],
        "extend": "TypeNode",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "TypeMemberSignature": {
        "indent": 0,
        "fields": [],
        "params": [],
        "name": "TypeMemberSignature",
        "comment": "类型成员签名(`x： y`、`x() {...}`)",
        "codes": [
            "switch (peek) {",
            "\tcase 'get':",
            "\tcase 'set':",
            "\t\tconst savedToken = lexer.current;",
            "\t\tlexer.read();",
            "\t\tif (tokens.isPropertyNameStart(peek)) {",
            "\t\t\treturn AccessorSignature(savedToken.type === 'get' ? savedToken.start : undefined, savedToken.type === 'set' ? savedToken.start : undefined);",
            "\t\t}",
            "\t\tlexer.current = savedToken;",
            "\t\tbreak;",
            "\tcase '[':",
            "\t\tlet isIndexSignature: boolean;",
            "\t\tconst savedToken2 = lexer.current;",
            "\t\tlexer.read();",
            "\t\tif (tokens.isIdentifierName, tokens.isTypeNodeStart(peek)) {",
            "\t\t\tlexer.read();",
            "\t\t\tisIndexSignature = peek === ':';",
            "\t\t}",
            "\t\tlexer.current = savedToken2;",
            "\t\tif (isIndexSignature) {",
            "\t\t\treturn IndexSignature();",
            "\t\t}",
            "\t\tbreak;",
            "\tcase '(':",
            "\tcase '<':",
            "\t\treturn FunctionSignature();",
            "\tcase 'new':",
            "\t\treturn ConstructSignature();",
            "}",
            "const name = PropertyName();",
            "const questionToken = peek === '?' ? read('?') : undefined;",
            "switch (peek) {",
            "\tcase '(':",
            "\tcase '<':",
            "\t\treturn MethodSignature(name, questionToken);",
            "\tdefault:",
            "\t\treturn PropertySignature(name, questionToken);",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": "PropertySignature, FunctionSignature, ConstructSignature, IndexSignature, MethodSignature, AccessorSignature"
    },
    "AccessorSignature": {
        "indent": 4,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "getToken",
                "comment": "标记 'get' 的位置",
                "type": "number"
            },
            {
                "inline": "",
                "optional": true,
                "name": "setToken",
                "comment": "标记 'set' 的位置",
                "type": "number"
            },
            {
                "optional": false,
                "inline": "",
                "name": "name",
                "type": "PropertyName",
                "comment": " 名字部分 "
            },
            {
                "optional": true,
                "inline": "",
                "name": "questionToken",
                "type": "number",
                "comment": "标记 '?' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "parameters",
                "type": "nodes.NodeList<ParameterDeclaration>",
                "comment": "参数部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "commaToken",
                "type": "number",
                "comment": "标记 ',' 的位置"
            }
        ],
        "params": [
            {
                "name": "getToken",
                "type": "number",
                "comment": "标记 'get' 的位置",
                "value": "",
                "optional": true
            },
            {
                "name": "setToken",
                "type": "number",
                "comment": "标记 'set' 的位置",
                "value": "",
                "optional": true
            }
        ],
        "name": "AccessorSignature",
        "comment": "访问器签名(`get x(): number`、`set x(value): void`)",
        "codes": [
            "if (getToken != undefined) {",
            "\t_.getToken = getToken;",
            "}",
            "if (setToken != undefined) {",
            "\t_.setToken = setToken;",
            "}",
            "this.parseDocComment(_);",
            "_.name = PropertyName();",
            "if (peek === '?') {",
            "\t_.questionToken = readToken(tokens.TokenType.question);;",
            "}",
            "_.parameters = Parameters();",
            "this.parseTypeAnnotation(_);",
            "this.parseCommaOrSemicolon(_);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "IndexSignature": {
        "indent": 4,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "openBracketToken",
                "type": "number",
                "comment": "标记 '[' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "argument",
                "type": "Identifier",
                "comment": " 参数部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            },
            {
                "optional": false,
                "inline": "",
                "name": "closeBracketToken",
                "type": "number",
                "comment": "标记 ']' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "commaToken",
                "type": "number",
                "comment": "标记 ',' 的位置"
            }
        ],
        "params": [],
        "name": "IndexSignature",
        "comment": "索引器声明(`[key: string]: string``)",
        "codes": [
            "this.parseDocComment(_);",
            "_.openBracketToken = readToken(tokens.TokenType.openBracket);",
            "_.argument = Identifier();",
            "this.parseTypeAnnotation(_);",
            "_.closeBracketToken = readToken(tokens.TokenType.closeBracket);",
            "this.parseTypeAnnotation(_);",
            "this.parseCommaOrSemicolon(_);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "FunctionSignature": {
        "indent": 3,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>"
            },
            {
                "optional": false,
                "inline": "",
                "name": "parameters",
                "type": "nodes.NodeList<ParameterDeclaration>",
                "comment": "参数部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "commaToken",
                "type": "number",
                "comment": "标记 ',' 的位置"
            }
        ],
        "params": [],
        "name": "FunctionSignature",
        "comment": "函数签名(`(): number`)",
        "codes": [
            "this.parseDocComment(_);",
            "this.parseMethodOrConstructOrCallSignature(_);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ConstructSignature": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "newToken",
                "type": "number",
                "comment": "标记 'new' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>"
            },
            {
                "optional": false,
                "inline": "",
                "name": "parameters",
                "type": "nodes.NodeList<ParameterDeclaration>",
                "comment": "参数部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "commaToken",
                "type": "number",
                "comment": "标记 ',' 的位置"
            }
        ],
        "params": [],
        "name": "ConstructSignature",
        "comment": "构造函数签名(`new x(): number`)",
        "codes": [
            "this.parseDocComment(_);",
            "_.newToken = readToken(tokens.TokenType.new);",
            "this.parseMethodOrConstructOrCallSignature(_);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "MethodSignature": {
        "indent": 3,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "name",
                "comment": " 名字部分 ",
                "type": "PropertyName"
            },
            {
                "inline": "",
                "optional": true,
                "name": "questionToken",
                "comment": "标记 '?' 的位置",
                "type": "number"
            },
            {
                "optional": true,
                "inline": "",
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>"
            },
            {
                "optional": false,
                "inline": "",
                "name": "parameters",
                "type": "nodes.NodeList<ParameterDeclaration>",
                "comment": "参数部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "commaToken",
                "type": "number",
                "comment": "标记 ',' 的位置"
            }
        ],
        "params": [
            {
                "name": "name",
                "type": "PropertyName",
                "comment": " 名字部分 ",
                "value": "",
                "optional": false
            },
            {
                "name": "questionToken",
                "type": "number",
                "comment": "标记 '?' 的位置",
                "value": "",
                "optional": true
            }
        ],
        "name": "MethodSignature",
        "comment": "方法签名(`x(): number`)",
        "codes": [
            "_.name = name;",
            "if (questionToken != undefined) {",
            "\t_.questionToken = questionToken;",
            "}",
            "this.parseDocComment(_);",
            "this.parseMethodOrConstructOrCallSignature(_);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "PropertySignature": {
        "indent": 3,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "name",
                "comment": " 名字部分 ",
                "type": "PropertyName"
            },
            {
                "inline": "",
                "optional": true,
                "name": "questionToken",
                "comment": "标记 '?' 的位置",
                "type": "number"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "commaToken",
                "type": "number",
                "comment": "标记 ',' 的位置"
            }
        ],
        "params": [
            {
                "name": "name",
                "type": "PropertyName",
                "comment": " 名字部分 ",
                "value": "",
                "optional": false
            },
            {
                "name": "questionToken",
                "type": "number",
                "comment": "标记 '?' 的位置",
                "value": "",
                "optional": true
            }
        ],
        "name": "PropertySignature",
        "comment": "属性签名(`x: number`)",
        "codes": [
            "_.name = name;",
            "if (questionToken != undefined) {",
            "\t_.questionToken = questionToken;",
            "}",
            "this.parseDocComment(_);",
            "this.parseTypeAnnotation(_);",
            "this.parseCommaOrSemicolon(_);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "MethodOrConstructOrCallSignature": {
        "indent": 1,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>"
            },
            {
                "optional": false,
                "inline": "",
                "name": "parameters",
                "type": "nodes.NodeList<ParameterDeclaration>",
                "comment": "参数部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "commaToken",
                "type": "number",
                "comment": "标记 ',' 的位置"
            }
        ],
        "params": [
            {
                "name": "_",
                "type": "BreakStatement | ContinueStatement",
                "comment": " 解析的目标节点 ",
                "optional": false
            }
        ],
        "name": "MethodOrConstructOrCallSignature",
        "comment": "方法(`x(): number`)或构造函数(`new x(): number`)或函数(`(): number`)签名",
        "codes": [
            "this.parseCallSignature(_);",
            "this.parseCommaOrSemicolon(_);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "TypeParameters": {
        "indent": 0,
        "fields": [],
        "params": [],
        "name": "TypeParameters",
        "comment": "类型参数列表(`<T>`)",
        "codes": [
            "return this.parseDelimitedList(TypeParameterDeclaration, '<', '>', false, tokens.isIdentifierName);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": {
            "element": "TypeParameterDeclaration",
            "allowEmpty": false,
            "open": "'<'",
            "close": "'>'",
            "seperator": "','",
            "continue": "tokens.isIdentifierName"
        },
        "alias": ""
    },
    "TypeParameterDeclaration": {
        "indent": 1,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "name",
                "type": "Identifier",
                "comment": " 名字部分 "
            },
            {
                "optional": true,
                "inline": "",
                "name": "extendsToken",
                "type": "number",
                "comment": "标记 'extends' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "extends",
                "type": "TypeNode"
            }
        ],
        "params": [],
        "name": "TypeParameterDeclaration",
        "comment": "类型参数声明(`T`、`T extends R`)",
        "codes": [
            "_.name = Identifier();",
            "if (peek === 'extends') {",
            "\t_.extendsToken = readToken(tokens.TokenType.extends);",
            "\t_.extends = TypeNode();",
            "}"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "TypeArguments": {
        "indent": 0,
        "fields": [],
        "params": [],
        "name": "TypeArguments",
        "comment": "类型参数列表(`<number>`)",
        "codes": [
            "return this.parseDelimitedList(TypeArgument, '<', '>', false, tokens.isTypeNodeStart);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": {
            "element": "TypeArgument",
            "allowEmpty": false,
            "open": "'<'",
            "close": "'>'",
            "seperator": "','",
            "continue": "tokens.isTypeNodeStart"
        },
        "alias": ""
    },
    "TypeArgument": {
        "indent": 1,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "value",
                "type": "TypeNode",
                "comment": " 值部分"
            }
        ],
        "params": [],
        "name": "TypeArgument",
        "comment": "类型参数(`number`)",
        "codes": [
            "_.value = TypeNode(tokens.Precedence.assignment);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "Parameters": {
        "indent": 0,
        "fields": [],
        "params": [],
        "name": "Parameters",
        "comment": "参数列表(`(x, y)`)",
        "codes": [
            "return this.parseNodeList(ParameterDeclaration, '(', ')"
        ],
        "extend": "Node",
        "abstract": false,
        "list": {
            "element": "ParameterDeclaration",
            "allowEmpty": true,
            "open": "'('",
            "close": "'",
            "seperator": "",
            "continue": ""
        },
        "alias": ""
    },
    "ParameterDeclaration": {
        "indent": 1,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "optional": true,
                "inline": "",
                "name": "dotDotDotToken",
                "type": "number"
            },
            {
                "optional": false,
                "inline": "",
                "name": "name",
                "type": "BindingName",
                "comment": " 名字部分 "
            },
            {
                "optional": true,
                "inline": "",
                "name": "questionToken",
                "type": "number",
                "comment": "标记 '?' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "equalsToken",
                "type": "number",
                "comment": "标记 '=' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "initializer",
                "type": "Expression",
                "comment": " 初始值部分"
            }
        ],
        "params": [],
        "name": "ParameterDeclaration",
        "comment": "参数声明(`x`、`x?: number`)",
        "codes": [
            "const modifiers = Modifiers();",
            "if (modifiers) {",
            "\t_.modifiers = modifiers;",
            "}",
            "if (peek === '...') {",
            "\t_.dotDotDotToken = readToken(tokens.TokenType.dotDotDot);;",
            "}",
            "_.name = BindingName();",
            "if (peek === '?') {",
            "\t_.questionToken = readToken(tokens.TokenType.question);;",
            "}",
            "this.parseTypeAnnotation(_);",
            "this.parseInitializer(_);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "BindingName": {
        "indent": 0,
        "fields": [],
        "params": [],
        "name": "BindingName",
        "comment": "绑定名称(`x`, `[x]`, `{x: x}`)",
        "codes": [
            "switch (peek) {",
            "\tcase '[':",
            "\t\treturn ArrayBindingPattern();",
            "\tcase '{':",
            "\t\treturn ObjectBindingPattern();",
            "\tdefault:",
            "\t\treturn Identifier();",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": "Identifier, ArrayBindingPattern, ObjectBindingPattern"
    },
    "ArrayBindingPattern": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "elements",
                "type": "nodes.NodeList<ArrayBindingElement>",
                "comment": " 元素列表"
            }
        ],
        "params": [],
        "name": "ArrayBindingPattern",
        "comment": "数组绑定模式项(`[x]`)",
        "codes": [
            "_.elements = this.parseDelimitedList(ArrayBindingElement, '[', ']', true, tokens.isArrayBindingElementStart);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ArrayBindingElement": {
        "indent": 4,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "dotDotDotToken",
                "type": "number"
            },
            {
                "optional": true,
                "inline": "",
                "name": "value",
                "type": "BindingName",
                "comment": " 值部分"
            }
        ],
        "params": [],
        "name": "ArrayBindingElement",
        "comment": "数组绑定模式项(`x`)",
        "codes": [
            "if (peek !== ',' && peek !== ']') {",
            "\tif (peek === '...') {",
            "\t\t_.dotDotDotToken = readToken(tokens.TokenType.dotDotDot);;",
            "\t}",
            "\t_.value = BindingName();",
            "\tInitializer(_);",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ObjectBindingPattern": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "elements",
                "type": "nodes.NodeList<ObjectBindingElement>",
                "comment": " 元素列表"
            }
        ],
        "params": [],
        "name": "ObjectBindingPattern",
        "comment": "对象绑定模式项(`{x: x}`)",
        "codes": [
            "_.elements = this.parseDelimitedList(ObjectBindingElement, '{', '}', true, tokens.isPropertyNameStart);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ObjectBindingElement": {
        "indent": 4,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "key",
                "type": "PropertyName"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "value",
                "type": "BindingName",
                "comment": " 值部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "equalsToken",
                "type": "number",
                "comment": "标记 '=' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "initializer",
                "type": "Expression",
                "comment": " 初始值部分"
            }
        ],
        "params": [],
        "name": "ObjectBindingElement",
        "comment": "对象绑定模式项(`x`)",
        "codes": [
            "const keyToken = peek;",
            "_.key = PropertyName();",
            "if (peek === ':') {",
            "\t_.colonToken = readToken(tokens.TokenType.colon);",
            "\t_.value = BindingName();",
            "} else if (!tokens.isIdentifierName, tokens.isTypeNodeStart(keyToken)) {",
            "\treadToken(':');",
            "}",
            "this.parseInitializer(_);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "TypeAnnotation": {
        "indent": 0,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            }
        ],
        "params": [
            {
                "name": "_",
                "type": "BreakStatement | ContinueStatement",
                "comment": " 解析的目标节点 ",
                "optional": false
            }
        ],
        "name": "TypeAnnotation",
        "comment": "类型注解(`: number`)",
        "codes": [
            "if (peek === ':') {",
            "\t_.colonToken = readToken(tokens.TokenType.colon);",
            "\t_.type = TypeNode();",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "Initializer": {
        "indent": 0,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "equalsToken",
                "type": "number",
                "comment": "标记 '=' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "initializer",
                "type": "Expression",
                "comment": " 初始值部分"
            }
        ],
        "params": [
            {
                "name": "_",
                "type": "BreakStatement | ContinueStatement",
                "comment": " 解析的目标节点 ",
                "optional": false
            },
            {
                "name": "allowIn",
                "type": "boolean",
                "comment": "是否解析 in 表达式",
                "optional": true
            }
        ],
        "name": "Initializer",
        "comment": "初始值",
        "codes": [
            "if (peek === '=') {",
            "\t_.equalsToken = readToken(tokens.TokenType.equals);",
            "\t_.initializer = Expression(tokens.Precedence.assignment, allowIn);",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "PropertyName": {
        "indent": 0,
        "fields": [],
        "params": [],
        "name": "PropertyName",
        "comment": "属性名称(`xx`、`\"xx\"`、`0`、`[xx]`)",
        "codes": [
            "switch (peek) {",
            "\tcase 'stringLiteral':",
            "\t\treturn StringLiteral();",
            "\tcase 'numericLiteral':",
            "\t\treturn NumericLiteral();",
            "\tcase '[':",
            "\t\treturn ComputedPropertyName();",
            "\tdefault:",
            "\t\treturn Identifier(true);",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": "Identifier, NumericLiteral, StringLiteral, ComputedPropertyName"
    },
    "ComputedPropertyName": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "openBracketToken",
                "type": "number",
                "comment": "标记 '[' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "body",
                "type": "Expression",
                "comment": " 主体部分"
            },
            {
                "optional": false,
                "inline": "",
                "name": "closeBracketToken",
                "type": "number",
                "comment": "标记 ']' 的位置"
            }
        ],
        "params": [],
        "name": "ComputedPropertyName",
        "comment": "已计算的属性名(`[1]`)",
        "codes": [
            "_.openBracketToken = readToken(tokens.TokenType.openBracket);",
            "_.body = Expression(tokens.Precedence.assignment);",
            "_.closeBracketToken = readToken(tokens.TokenType.closeBracket);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "CommaOrSemicolon": {
        "indent": 0,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "commaToken",
                "type": "number",
                "comment": "标记 ',' 的位置"
            }
        ],
        "params": [
            {
                "name": "_",
                "type": "BreakStatement | ContinueStatement",
                "comment": " 解析的目标节点 ",
                "optional": false
            }
        ],
        "name": "CommaOrSemicolon",
        "comment": "对象成员尾部",
        "codes": [
            "switch (peek) {",
            "\tcase ';':",
            "\t\t_.semicolonToken = readToken(tokens.TokenType.semicolon);",
            "\tcase ',':",
            "\t\t_.commaToken = readToken(tokens.TokenType.comma);",
            "\t\tbreak;",
            "\tdefault:",
            "\t\tif (sameLine) {",
            "\t\t\terror({ start: lexer.current.end, end: lexer.current.end }, \"Missing ';' after property.\");",
            "\t\t}",
            "\t\tbreak;",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "Expression": {
        "indent": 0,
        "fields": [],
        "params": [
            {
                "name": "precedence",
                "comment": "允许解析的最低操作符优先级",
                "value": "tokens.Precedence.any",
                "optional": false
            },
            {
                "name": "allowIn",
                "type": "boolean",
                "comment": "是否解析 in 表达式",
                "value": "true",
                "optional": false
            }
        ],
        "name": "Expression",
        "comment": "表达式",
        "codes": [
            "let result: Expression;",
            "switch (peek) {",
            "\tcase 'this':",
            "\tcase 'null':",
            "\tcase 'true':",
            "\tcase 'false':",
            "\tcase 'super':",
            "\t\tresult = this.parseSimpleLiteral();",
            "\t\tbreak;",
            "\tcase '(':",
            "\t\tresult = this.parseArrowFunctionOrParenthesizedExpression(allowIn);",
            "\t\tbreak;",
            "\tcase 'numericLiteral':",
            "\t\tresult = NumericLiteral;",
            "\t\tbreak;",
            "\tcase 'stringLiteral':",
            "\tcase 'noSubstitutionTemplateLiteral':",
            "\t\tresult = StringLiteral;",
            "\t\tbreak;",
            "\tcase '[':",
            "\t\tresult = this.parseArrayLiteral();",
            "\t\tbreak;",
            "\tcase '{':",
            "\t\tresult = this.parseObjectLiteral();",
            "\t\tbreak;",
            "\tcase 'function':",
            "\t\tresult = FunctionExpression;",
            "\t\tbreak;",
            "\tcase 'new':",
            "\t\tresult = this.parseNewTargetOrNewExpression();",
            "\t\tbreak;",
            "\tcase '/':",
            "\tcase '/=':",
            "\t\tresult = this.parseRegularExpressionLiteral();",
            "\t\tbreak;",
            "\tcase 'templateHead':",
            "\t\tresult = TemplateLiteral;",
            "\t\tbreak;",
            "\tcase '<':",
            "\t\tresult = this.parseArrowFunctionOrTypeAssertionExpression(allowIn);",
            "\t\tbreak;",
            "\tcase 'yield':",
            "\t\tresult = this.parseYieldExpression(allowIn);",
            "\t\tbreak;",
            "\tcase 'await':",
            "\t\tresult = this.parseAwaitExpressionOrIdentifier(allowIn);",
            "\t\tbreak;",
            "\tcase 'class':",
            "\t\tresult = ClassExpression();",
            "\t\tbreak;",
            "\tcase 'async':",
            "\t\tresult = this.parseAsyncFunctionExpressionOrIdentifier(allowIn);",
            "\t\tbreak;",
            "\tcase '=>':",
            "\t\tresult = ArrowFunctionExpression(undefined, undefined, undefined, allowIn);",
            "\t\tbreak;",
            "\tdefault:",
            "\t\tif (tokens.isUnaryOperator(peek)) {",
            "\t\t\tresult = this.parseUnaryExpression();",
            "\t\t\tbreak;",
            "\t\t}",
            "\t\tif (tokens.isIdentifierName, tokens.isTypeNodeStart(peek)) {",
            "\t\t\tresult = ArrowFunctionOrGenericExpressionOrIdentifier(allowIn);",
            "\t\t\tbreak;",
            "\t\t}",
            "\t\terror(lexer.peek(), tokens.isKeyword(peek) ? \"Expression expected; '{0}' is a keyword.\" : \"Expression expected; Unexpected token '{0}'.\", tokens.getTokenName(peek));",
            "\t\treturn MissingExpression(tokens.isStatementStart(peek) ? lexer.current.end : lexer.read().type);",
            "}",
            "while (tokens.getPrecedence(peek) >= precedence) {",
            "\tswitch (peek) {",
            "\t\tcase '.':",
            "\t\t\tresult = MemberCallExpression(result);",
            "\t\t\tcontinue;",
            "\t\tcase '(':",
            "\t\t\tresult = FunctionCallExpression(result);",
            "\t\t\tcontinue;",
            "\t\tcase '[':",
            "\t\t\tresult = IndexCallExpression(result);",
            "\t\t\tcontinue;",
            "\t\tcase '?':",
            "\t\t\tresult = ConditionalExpression(result, allowIn);",
            "\t\t\tcontinue;",
            "\t\tcase '++':",
            "\t\tcase '--':",
            "\t\t\tif (!sameLine) {",
            "\t\t\t\treturn result;",
            "\t\t\t}",
            "\t\t\tresult = PostfixExpression(result);",
            "\t\t\tcontinue;",
            "\t\tcase 'noSubstitutionTemplateLiteral':",
            "\t\t\tresult = TemplateCallExpression(result, StringLiteral);",
            "\t\t\tcontinue;",
            "\t\tcase 'templateHead':",
            "\t\t\tresult = TemplateCallExpression(result, TemplateLiteral);",
            "\t\t\tcontinue;",
            "\t\tcase '>':",
            "\t\t\tconst savedToken = lexer.current;",
            "\t\t\tlexer.readAsGreaterThanTokens();",
            "\t\t\tlexer.current = savedToken;",
            "\t\t\tbreak;",
            "\t\tcase 'in':",
            "\t\t\tif (allowIn === false) {",
            "\t\t\t\treturn result;",
            "\t\t\t}",
            "\t\t\tbreak;",
            "\t}",
            "\tresult = BinaryExpression(result, allowIn);",
            "}",
            "return result;"
        ],
        "extend": "Node",
        "abstract": true,
        "list": null,
        "alias": ""
    },
    "SimpleLiteral": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "type",
                "type": "number",
                "comment": " 类型"
            }
        ],
        "params": [],
        "name": "SimpleLiteral",
        "comment": "简单字面量(`null`、`true`、`false`、`this`、`super`)",
        "codes": [
            "_.type = this.lexer.read(); // this、null、true、false、super"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ArrowFunctionOrParenthesizedExpression": {
        "indent": 3,
        "fields": [],
        "params": [
            {
                "name": "allowIn",
                "type": "boolean",
                "comment": "是否解析 in 表达式",
                "optional": true
            }
        ],
        "name": "ArrowFunctionOrParenthesizedExpression",
        "comment": "箭头或括号表达式(`()=>...`、`(x)`)",
        "codes": [
            "const savedState = lexer.stashSave();",
            "const parameters = Parameters();",
            "if (sameLine && (peek === '=>' || peek === ':' || peek === '{')) {",
            "\tlexer.stashClear(savedState);",
            "\treturn ArrowFunctionExpression(undefined, undefined, parameters, allowIn);",
            "}",
            "lexer.stashRestore(savedState);",
            "return this.parseParenthesizedExpression();"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ParenthesizedExpression": {
        "indent": 4,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "openParenToken",
                "type": "number",
                "comment": "标记 '(' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "body",
                "type": "Expression",
                "comment": " 主体部分"
            },
            {
                "optional": false,
                "inline": "",
                "name": "closeParenToken",
                "type": "number",
                "comment": "标记 ')' 的位置"
            }
        ],
        "params": [],
        "name": "ParenthesizedExpression",
        "comment": "括号表达式(`(x)`)",
        "codes": [
            "_.openParenToken = readToken(tokens.TokenType.openParen);",
            "_.body = Expression();",
            "_.closeParenToken = readToken(tokens.TokenType.closeParen);"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ArrayLiteral": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "elements",
                "type": "nodes.NodeList<ArrayLiteralElement>",
                "comment": " 元素列表"
            }
        ],
        "params": [],
        "name": "ArrayLiteral",
        "comment": "数组字面量(`[x, y]`)",
        "codes": [
            "_.elements = this.parseDelimitedList(ArrayLiteralElement, '[', ']', true, tokens.isExpressionStart);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ArrayLiteralElement": {
        "indent": 4,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "dotDotDotToken",
                "type": "number"
            },
            {
                "optional": true,
                "inline": "",
                "name": "value",
                "type": "Expression",
                "comment": " 值部分"
            }
        ],
        "params": [],
        "name": "ArrayLiteralElement",
        "comment": "数组字面量元素(`x`)",
        "codes": [
            "if (peek !== ',' && peek !== ']') {",
            "\tif (peek === '...') {",
            "\t\t_.dotDotDotToken = readToken(tokens.TokenType.dotDotDot);;",
            "\t}",
            "\t_.value = Expression(tokens.Precedence.assignment);",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ObjectLiteral": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "elements",
                "type": "nodes.NodeList<ObjectLiteralElement>",
                "comment": " 元素列表"
            }
        ],
        "params": [],
        "name": "ObjectLiteral",
        "comment": "对象字面量(`{x: y}`)",
        "codes": [
            "_.elements = this.parseDelimitedList(ObjectLiteralElement, '{', '}', true, tokens.isPropertyNameStart);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ObjectLiteralElement": {
        "indent": 4,
        "fields": [],
        "params": [],
        "name": "ObjectLiteralElement",
        "comment": "对象字面量元素(`x: y`、`x() {...}`)",
        "codes": [
            "const modifiers = Modifiers;",
            "switch (peek) {",
            "\tcase 'get':",
            "\tcase 'set':",
            "\t\tconst savedToken = lexer.current;",
            "\t\tlexer.read();",
            "\t\tif (tokens.isPropertyNameStart(peek)) {",
            "\t\t\treturn ObjectAccessorDeclaration(modifiers, savedToken.type === 'get' ? savedToken.start : undefined, savedToken.type === 'set' ? savedToken.start : undefined);",
            "\t\t}",
            "\t\tlexer.current = savedToken;",
            "\t\tbreak;",
            "\tcase '*':",
            "\t\treturn ObjectMethodDeclaration(modifiers, readToken('*'), PropertyName);",
            "}",
            "const name = PropertyName;",
            "switch (peek) {",
            "\tcase '(':",
            "\tcase '<':",
            "\t\treturn ObjectMethodDeclaration(modifiers, undefined, name);",
            "\tdefault:",
            "\t\treturn ObjectPropertyDeclaration(modifiers, name);",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": "ObjectPropertyDeclaration, ObjectMethodDeclaration, ObjectAccessorDeclaration"
    },
    "ObjectAccessorDeclaration": {
        "indent": 8,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "inline": "",
                "optional": true,
                "name": "getToken",
                "comment": "标记 'get' 的位置",
                "type": "number"
            },
            {
                "inline": "",
                "optional": true,
                "name": "setToken",
                "comment": "标记 'set' 的位置",
                "type": "number"
            },
            {
                "optional": false,
                "inline": "",
                "name": "name",
                "type": "PropertyName",
                "comment": " 名字部分 "
            },
            {
                "optional": true,
                "inline": "",
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>"
            },
            {
                "optional": false,
                "inline": "",
                "name": "parameters",
                "type": "nodes.NodeList<ParameterDeclaration>",
                "comment": "参数部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "body",
                "type": "BlockStatement | Expression",
                "comment": " 主体部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "equalsGreaterThanToken",
                "type": "number",
                "comment": "标记 '=>' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "body",
                "type": "BlockStatement | Expression",
                "comment": " 主体部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "commaToken",
                "type": "number",
                "comment": "标记 ',' 的位置"
            }
        ],
        "params": [
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            },
            {
                "name": "getToken",
                "type": "number",
                "comment": "标记 'get' 的位置",
                "value": "",
                "optional": true
            },
            {
                "name": "setToken",
                "type": "number",
                "comment": "标记 'set' 的位置",
                "value": "",
                "optional": true
            }
        ],
        "name": "ObjectAccessorDeclaration",
        "comment": "访问器声明(`get x() {...}`、`set x(value) {...}`)",
        "codes": [
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "if (getToken != undefined) {",
            "\t_.getToken = getToken;",
            "}",
            "if (setToken != undefined) {",
            "\t_.setToken = setToken;",
            "}",
            "this.parseDocComment(_);",
            "_.name = PropertyName();",
            "this.parseCallSignature(_);",
            "this.parseFunctionBody(_);",
            "this.parseCommaOrSemicolon(_);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ObjectMethodDeclaration": {
        "indent": 7,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "inline": "",
                "optional": true,
                "name": "asteriskToken",
                "comment": "标记 '*' 的位置",
                "type": "number"
            },
            {
                "inline": "",
                "optional": false,
                "name": "name",
                "comment": " 名字部分 ",
                "type": "PropertyName"
            },
            {
                "optional": true,
                "inline": "",
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>"
            },
            {
                "optional": false,
                "inline": "",
                "name": "parameters",
                "type": "nodes.NodeList<ParameterDeclaration>",
                "comment": "参数部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "body",
                "type": "BlockStatement | Expression",
                "comment": " 主体部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "equalsGreaterThanToken",
                "type": "number",
                "comment": "标记 '=>' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "body",
                "type": "BlockStatement | Expression",
                "comment": " 主体部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "commaToken",
                "type": "number",
                "comment": "标记 ',' 的位置"
            }
        ],
        "params": [
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            },
            {
                "name": "asteriskToken",
                "type": "number",
                "comment": "标记 '*' 的位置",
                "value": "",
                "optional": true
            },
            {
                "name": "name",
                "type": "PropertyName",
                "comment": " 名字部分 ",
                "value": "",
                "optional": false
            }
        ],
        "name": "ObjectMethodDeclaration",
        "comment": "方法声明(`x() {...}`)",
        "codes": [
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "if (asteriskToken != undefined) {",
            "\t_.asteriskToken = asteriskToken;",
            "}",
            "_.name = name;",
            "this.parseDocComment(_);",
            "this.parseCallSignature(_);",
            "this.parseFunctionBody(_);",
            "this.parseCommaOrSemicolon(_);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ObjectPropertyDeclaration": {
        "indent": 7,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "inline": "",
                "optional": false,
                "name": "key",
                "type": "PropertyName"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "equalsToken",
                "type": "number",
                "comment": "标记 '=' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "value",
                "type": "Expression",
                "comment": " 值部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "commaToken",
                "type": "number",
                "comment": "标记 ',' 的位置"
            }
        ],
        "params": [
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            },
            {
                "name": "key",
                "type": "PropertyName",
                "value": "",
                "optional": false
            }
        ],
        "name": "ObjectPropertyDeclaration",
        "comment": "属性声明(`x: y`)",
        "codes": [
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "_.key = key;",
            "this.parseDocComment(_);",
            "if (peek === ':' || peek === '=') {",
            "\tif (peek === ':') {",
            "\t\t_.colonToken = readToken(tokens.TokenType.colon);",
            "\t} else {",
            "\t\t_.equalsToken = readToken(tokens.TokenType.equals);",
            "\t}",
            "\t_.value = Expression(tokens.Precedence.assignment);",
            "} else if (key.constructor === Identifier ? !utility.isIdentifier((<Identifier>key).value) :",
            "\tkey.constructor === MemberCallExpression ? !utility.isIdentifier((<MemberCallExpression>key).argument) :",
            "\t\ttrue) {",
            "\treadToken(':');",
            "}",
            "this.parseCommaOrSemicolon(_);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "NewTargetOrNewExpression": {
        "indent": 3,
        "fields": [],
        "params": [],
        "name": "NewTargetOrNewExpression",
        "comment": "new.target(`new.target`) 或 new 表达式(`new x()`)",
        "codes": [
            "const newToken = read('new');",
            "if (peek === '.') {",
            "\treturn this.parseNewTargetExpression(newToken);",
            "}",
            "return this.parseNewExpression(newToken);"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "NewTargetExpression": {
        "indent": 5,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "newToken",
                "comment": "标记 'new' 的位置",
                "type": "number"
            },
            {
                "optional": false,
                "inline": "",
                "name": "dotToken",
                "type": "number",
                "comment": "标记 '.' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "target",
                "type": "number",
                "comment": "目标部分"
            }
        ],
        "params": [
            {
                "name": "newToken",
                "type": "number",
                "comment": "标记 'new' 的位置",
                "value": "",
                "optional": false
            }
        ],
        "name": "NewTargetExpression",
        "comment": "new.target 表达式(`new.target`)",
        "codes": [
            "_.newToken = newToken;",
            "_.dotToken = readToken(tokens.TokenType.dot);",
            "if (peek === 'identifier' && lexer.peek().data === \"target\") {",
            "\t_.target = readToken(tokens.TokenType.unknown);",
            "} else {",
            "\terror(lexer.peek(), \"'target' expected; Unexpected token '{0}'.\", tokens.getTokenName(peek));",
            "}"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "NewExpression": {
        "indent": 4,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "newToken",
                "comment": "标记 'new' 的位置",
                "type": "number"
            },
            {
                "optional": false,
                "inline": "",
                "name": "target",
                "type": "Expression",
                "comment": "目标部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "arguments",
                "type": "nodes.NodeList<Argument>"
            }
        ],
        "params": [
            {
                "name": "newToken",
                "type": "number",
                "comment": "标记 'new' 的位置",
                "value": "",
                "optional": false
            }
        ],
        "name": "NewExpression",
        "comment": "new 表达式(`new x()`、`new x`)",
        "codes": [
            "_.newToken = newToken;",
            "_.target = Expression(tokens.Precedence.member);",
            "if (peek === '(') {",
            "\t_.arguments = Arguments();",
            "}"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "RegularExpressionLiteral": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "value",
                "type": "number",
                "comment": " 值部分"
            }
        ],
        "params": [],
        "name": "RegularExpressionLiteral",
        "comment": "正则表达式字面量(/abc/)",
        "codes": [
            "_.value = readToken(tokens.TokenType.regularExpressionLiteral);"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "TemplateLiteral": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "spans",
                "type": "nodes.NodeList<TemplateSpan || Expression>",
                "comment": " 组成部分列表"
            }
        ],
        "params": [],
        "name": "TemplateLiteral",
        "comment": "模板字面量(`\\`abc\\``)",
        "codes": [
            "_.spans = this.parseNodeList(TemplateSpan || Expression, , )",
            "while (true) {",
            "\tresult.spans.push(TemplateSpan());",
            "\tresult.spans.push(Expression());",
            "\tif (peek !== '}') {",
            "\t\treadToken('}');",
            "\t\tbreak;",
            "\t}",
            "\tif (lexer.readAsTemplateMiddleOrTail().type === 'templateTail') {",
            "\t\tresult.spans.push(TemplateSpan());",
            "\t\tbreak;",
            "\t}",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "TemplateSpan": {
        "indent": 5,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "value",
                "type": "number",
                "comment": " 值部分"
            }
        ],
        "params": [],
        "name": "TemplateSpan",
        "comment": "模板文本区块(`\\`abc${`、`}abc${`、`}abc\\``)",
        "codes": [
            "_.value = readToken(tokens.TokenType.templateMiddle);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ArrowFunctionOrTypeAssertionExpression": {
        "indent": 3,
        "fields": [],
        "params": [
            {
                "name": "allowIn",
                "type": "boolean",
                "comment": "是否解析 in 表达式",
                "optional": true
            }
        ],
        "name": "ArrowFunctionOrTypeAssertionExpression",
        "comment": "箭头函数(`<T>() => {}`)或类型确认表达式(`<T>fn`)",
        "codes": [
            "const savedState = lexer.stashSave();",
            "const typeParameters = TypeParameters();",
            "const parameters = peek === '(' ? Parameters() : tokens.isIdentifierName(peek) ? Identifier() : undefined;",
            "if (parameters && sameLine && (peek === '=>' || peek === ':' || peek === '{')) {",
            "\tlexer.stashClear(savedState);",
            "\treturn ArrowFunctionExpression(undefined, typeParameters, parameters, allowIn);",
            "}",
            "lexer.stashRestore(savedState);",
            "return this.parseTypeAssertionExpression();"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "TypeAssertionExpression": {
        "indent": 4,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "lessThanToken",
                "type": "number",
                "comment": "标记 '<' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型"
            },
            {
                "optional": false,
                "inline": "",
                "name": "greaterThanToken",
                "type": "number",
                "comment": "标记 '>' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "operand",
                "type": "Expression",
                "comment": " 操作数"
            }
        ],
        "params": [],
        "name": "TypeAssertionExpression",
        "comment": "类型确认表达式(<T>xx)",
        "codes": [
            "_.lessThanToken = readToken(tokens.TokenType.lessThan);",
            "_.type = TypeNode();",
            "_.greaterThanToken = readToken(tokens.TokenType.greaterThan);",
            "_.operand = Expression(tokens.Precedence.postfix);"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "YieldExpression": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "yieldToken",
                "type": "number",
                "comment": "标记 'yield' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "asteriskToken",
                "type": "number",
                "comment": "标记 '*' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "operand",
                "type": "Expression",
                "comment": " 操作数"
            }
        ],
        "params": [
            {
                "name": "allowIn",
                "type": "boolean",
                "comment": "是否解析 in 表达式",
                "optional": true
            }
        ],
        "name": "YieldExpression",
        "comment": "yield 表达式(`yield xx`)",
        "codes": [
            "_.yieldToken = readToken(tokens.TokenType.yield);",
            "if (sameLine && peek === '*') {",
            "\t_.asteriskToken = readToken(tokens.TokenType.asterisk);",
            "}",
            "if (sameLine && tokens.isExpressionStart(peek)) {",
            "\t_.operand = Expression(tokens.Precedence.assignment, allowIn);",
            "}"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "AwaitExpressionOrIdentifier": {
        "indent": 3,
        "fields": [],
        "params": [
            {
                "name": "allowIn",
                "type": "boolean",
                "comment": "是否解析 in 表达式",
                "optional": false
            }
        ],
        "name": "AwaitExpressionOrIdentifier",
        "comment": "await 表达式(`await xx`)或标识符",
        "codes": [
            "const savedToken = lexer.current;",
            "const awaitToken = read('await');",
            "if (sameLine && tokens.isExpressionStart(peek)) {",
            "\treturn this.parseAwaitExpression(awaitToken, allowIn);",
            "}",
            "lexer.current = savedToken;",
            "return Identifier;"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "AwaitExpression": {
        "indent": 5,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "awaitToken",
                "comment": "标记 'await' 的位置",
                "type": "number"
            },
            {
                "optional": false,
                "inline": "",
                "name": "operand",
                "type": "Expression",
                "comment": " 操作数"
            }
        ],
        "params": [
            {
                "name": "awaitToken",
                "type": "number",
                "comment": "标记 'await' 的位置",
                "value": "",
                "optional": false
            },
            {
                "name": "allowIn",
                "type": "boolean",
                "comment": "是否解析 in 表达式",
                "optional": true
            }
        ],
        "name": "AwaitExpression",
        "comment": "await 表达式(`await xx`)",
        "codes": [
            "_.awaitToken = awaitToken;",
            "_.operand = Expression(tokens.Precedence.assignment, allowIn);"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "AsyncFunctionExpressionOrIdentifier": {
        "indent": 3,
        "fields": [],
        "params": [
            {
                "name": "allowIn",
                "type": "boolean",
                "comment": "是否解析 in 表达式",
                "optional": true
            }
        ],
        "name": "AsyncFunctionExpressionOrIdentifier",
        "comment": "异步函数表达式或标识符",
        "codes": [
            "const savedState = lexer.stashSave();",
            "const modifiers = Modifiers;",
            "const typeParameters = sameLine && peek === '<' ? TypeParameters() : undefined;",
            "if (sameLine) {",
            "\tif (peek === 'function') {",
            "\t\treturn FunctionExpression(modifiers);",
            "\t}",
            "\tif ((peek === '(' || tokens.isIdentifierName, tokens.isTypeNodeStart(peek))) {",
            "\t\tconst parameters = peek === '(' ? Parameters() : Identifier();",
            "\t\tif (sameLine && (peek === '=>' || peek === ':' || peek === '{')) {",
            "\t\t\tlexer.stashClear(savedState);",
            "\t\t\treturn ArrowFunctionExpression(modifiers, typeParameters, parameters, allowIn);",
            "\t\t}",
            "\t}",
            "}",
            "lexer.stashRestore(savedState);",
            "return Identifier();"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "UnaryExpression": {
        "indent": 4,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "operator",
                "type": "number",
                "comment": " 操作符"
            },
            {
                "optional": false,
                "inline": "",
                "name": "operand",
                "type": "Expression",
                "comment": " 操作数"
            }
        ],
        "params": [],
        "name": "UnaryExpression",
        "comment": "一元运算表达式(`+x`、`typeof x`、...)",
        "codes": [
            "_.operator = this.lexer.read(); // delete、void、typeof、+、-、~、!、++、--、...",
            "_.operand = Expression(tokens.Precedence.postfix);"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ArrowFunctionOrGenericExpressionOrIdentifier": {
        "indent": 4,
        "fields": [],
        "params": [
            {
                "name": "allowIn",
                "type": "boolean",
                "comment": "是否解析 in 表达式",
                "optional": true
            }
        ],
        "name": "ArrowFunctionOrGenericExpressionOrIdentifier",
        "comment": "箭头函数或泛型表达式或标识符(`x => y`、`x<T>`、`x`)",
        "codes": [
            "let result: any = Identifier;",
            "switch (peek) {",
            "\tcase '=>':",
            "\t\tresult = ArrowFunctionExpression(undefined, undefined, result, allowIn);",
            "\t\tbreak;",
            "\tcase '<':",
            "\t\tif (sameLine) {",
            "\t\t\tconst savedState = lexer.stashSave();",
            "\t\t\tconst typeArguments = TypeArguments;",
            "\t\t\tif (current === '>') {",
            "\t\t\t\tlexer.stashClear(savedState);",
            "\t\t\t\tresult = GenericExpression(result, typeArguments);",
            "\t\t\t} else {",
            "\t\t\t\tlexer.stashRestore(savedState);",
            "\t\t\t}",
            "\t\t}",
            "\t\tbreak;",
            "}",
            "return result;"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "GenericExpression": {
        "indent": 9,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "target",
                "comment": "目标部分",
                "type": "Identifier"
            },
            {
                "inline": "",
                "optional": false,
                "name": "typeArguments",
                "comment": "类型参数部分",
                "type": "nodes.NodeList<TypeArgument>"
            }
        ],
        "params": [
            {
                "name": "target",
                "type": "Identifier",
                "comment": "目标部分",
                "value": "",
                "optional": false
            },
            {
                "name": "typeArguments",
                "type": "nodes.NodeList<TypeArgument>",
                "comment": "类型参数部分",
                "value": "",
                "optional": false
            }
        ],
        "name": "GenericExpression",
        "comment": "泛型表达式(`x<number>`)",
        "codes": [
            "_.target = target;",
            "_.typeArguments = typeArguments;"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "MissingExpression": {
        "indent": 3,
        "fields": [],
        "params": [
            {
                "name": "start",
                "type": "number/*标记的开始位置*/",
                "optional": false
            }
        ],
        "name": "MissingExpression",
        "comment": "错误的表达式占位符",
        "codes": [],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "FunctionCallExpression": {
        "indent": 4,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "target",
                "comment": "目标部分",
                "type": "Expression"
            },
            {
                "optional": false,
                "inline": "",
                "name": "arguments",
                "type": "nodes.NodeList<Argument>"
            }
        ],
        "params": [
            {
                "name": "target",
                "type": "Expression",
                "comment": "目标部分",
                "value": "",
                "optional": false
            }
        ],
        "name": "FunctionCallExpression",
        "comment": "函数调用表达式(`x()`)",
        "codes": [
            "_.target = target;",
            "_.arguments = Arguments();"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "IndexCallExpression": {
        "indent": 4,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "target",
                "comment": "目标部分",
                "type": "Expression"
            },
            {
                "optional": false,
                "inline": "",
                "name": "openBracketToken",
                "type": "number",
                "comment": "标记 '[' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "argument",
                "type": "Expression",
                "comment": " 参数部分"
            },
            {
                "optional": false,
                "inline": "",
                "name": "closeBracketToken",
                "type": "number",
                "comment": "标记 ']' 的位置"
            }
        ],
        "params": [
            {
                "name": "target",
                "type": "Expression",
                "comment": "目标部分",
                "value": "",
                "optional": false
            }
        ],
        "name": "IndexCallExpression",
        "comment": "索引调用表达式(`x[y]`)",
        "codes": [
            "_.target = target;",
            "_.openBracketToken = readToken(tokens.TokenType.openBracket);",
            "_.argument = Expression();",
            "_.closeBracketToken = readToken(tokens.TokenType.closeBracket);"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ConditionalExpression": {
        "indent": 4,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "condition",
                "type": "Expression"
            },
            {
                "optional": false,
                "inline": "",
                "name": "questionToken",
                "type": "number",
                "comment": "标记 '?' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "then",
                "type": "Expression",
                "comment": " 则部分"
            },
            {
                "optional": false,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "else",
                "type": "Expression",
                "comment": " 否则部分"
            }
        ],
        "params": [
            {
                "name": "condition",
                "type": "Expression",
                "value": "",
                "optional": false
            },
            {
                "name": "allowIn",
                "type": "boolean",
                "comment": "是否解析 in 表达式",
                "optional": true
            }
        ],
        "name": "ConditionalExpression",
        "comment": "条件表达式(`x ? y : z`)",
        "codes": [
            "_.condition = condition;",
            "_.questionToken = readToken(tokens.TokenType.question);",
            "_.then = Expression(tokens.Precedence.assignment);",
            "_.colonToken = readToken(tokens.TokenType.colon);",
            "_.else = Expression(tokens.Precedence.assignment, allowIn);"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "PostfixExpression": {
        "indent": 4,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "operand",
                "comment": " 操作数",
                "type": "Expression"
            },
            {
                "optional": false,
                "inline": "",
                "name": "operator",
                "type": "number",
                "comment": " 运算类型"
            }
        ],
        "params": [
            {
                "name": "operand",
                "type": "Expression",
                "comment": " 操作数",
                "value": "",
                "optional": false
            }
        ],
        "name": "PostfixExpression",
        "comment": "后缀表达式(`x++`、`x--`)",
        "codes": [
            "_.operand = operand;",
            "_.operator = this.lexer.read(); // ++、--"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "TemplateCallExpression": {
        "indent": 4,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "target",
                "comment": "目标部分",
                "type": "Expression"
            },
            {
                "inline": "",
                "optional": false,
                "name": "argument",
                "comment": " 参数部分",
                "type": "TemplateLiteral | StringLiteral"
            }
        ],
        "params": [
            {
                "name": "target",
                "type": "Expression",
                "comment": "目标部分",
                "value": "",
                "optional": false
            },
            {
                "name": "argument",
                "type": "TemplateLiteral | StringLiteral",
                "comment": " 参数部分",
                "value": "",
                "optional": false
            }
        ],
        "name": "TemplateCallExpression",
        "comment": "模板调用表达式(`x\\`abc\\``)",
        "codes": [
            "_.target = target;",
            "_.argument = argument;"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "BinaryExpression": {
        "indent": 2,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "left",
                "comment": "左值部分",
                "type": "Expression"
            },
            {
                "optional": false,
                "inline": "",
                "name": "operator",
                "type": "number",
                "comment": " 运算类型"
            },
            {
                "optional": false,
                "inline": "",
                "name": "right",
                "type": "Expression",
                "comment": " 右值部分"
            }
        ],
        "params": [
            {
                "name": "left",
                "type": "Expression",
                "comment": "左值部分",
                "value": "",
                "optional": false
            },
            {
                "name": "allowIn",
                "type": "boolean",
                "comment": "是否解析 in 表达式",
                "optional": true
            }
        ],
        "name": "BinaryExpression",
        "comment": "双目表达式(x + y、x = y、...)",
        "codes": [
            "_.left = left;",
            "_.operator = this.lexer.read(); // ,、*=、/=、%=、+=、‐=、<<=、>>=、>>>=、&=、^=、,=、**=、=、,,、&&、,、^、&、==、!=、===、!==、<、>、<=、>=、instanceof、in、<<、>>、>>>、+、-、*、/、%、**",
            "_.right = Expression(tokens.getPrecedence(result.operator) + (tokens.isRightHandOperator(_.operator) ? 0 : 1), allowIn);"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "Arguments": {
        "indent": 1,
        "fields": [],
        "params": [],
        "name": "Arguments",
        "comment": "函数调用参数列表",
        "codes": [
            "return this.parseDelimitedList(Argument, , , true, tokens.isArgumentStart);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": {
            "element": "Argument",
            "allowEmpty": true,
            "open": "",
            "close": "",
            "seperator": "','",
            "continue": "tokens.isArgumentStart"
        },
        "alias": ""
    },
    "Argument": {
        "indent": 2,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "dotDotDotToken",
                "type": "number"
            },
            {
                "optional": false,
                "inline": "",
                "name": "value",
                "type": "Expression",
                "comment": " 值部分"
            }
        ],
        "params": [],
        "name": "Argument",
        "comment": "函数调用参数(`x`)",
        "codes": [
            "if (peek === '...') {",
            "\t_.dotDotDotToken = readToken(tokens.TokenType.dotDotDot);;",
            "}",
            "_.value = Expression(tokens.Precedence.assignment);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ArrowFunctionExpression": {
        "indent": 1,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "inline": "",
                "optional": true,
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>"
            },
            {
                "inline": "",
                "optional": true,
                "name": "parameters",
                "comment": "参数部分",
                "type": "Parameters | Identifier"
            },
            {
                "optional": false,
                "inline": "",
                "name": "equalsGreaterThanToken",
                "type": "number",
                "comment": "标记 '=>' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "body",
                "type": "BlockStatement | Expression",
                "comment": " 主体部分"
            }
        ],
        "params": [
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            },
            {
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>",
                "value": "",
                "optional": true
            },
            {
                "name": "parameters",
                "type": "Parameters | Identifier",
                "comment": "参数部分",
                "value": "",
                "optional": true
            },
            {
                "name": "allowIn",
                "type": "boolean",
                "comment": "是否解析 in 表达式",
                "optional": true
            }
        ],
        "name": "ArrowFunctionExpression",
        "comment": "箭头函数表达式(`x => {...}`、`(x, y) => {...}`)。",
        "codes": [
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "if (typeParameters != undefined) {",
            "\t_.typeParameters = typeParameters;",
            "}",
            "if (parameters != undefined) {",
            "\t_.parameters = parameters;",
            "}",
            "if (parameters.constructor !== Identifier) {",
            "\tTypeAnnotation(_);",
            "}",
            "_.equalsGreaterThanToken = readToken(tokens.TokenType.equalsGreaterThan);",
            "_.body = peek === '{' ? BlockStatement() : Expression(tokens.Precedence.assignment, allowIn);"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "MemberCallExpression": {
        "indent": 0,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "target",
                "comment": "目标部分",
                "type": "Expression"
            },
            {
                "optional": false,
                "inline": "",
                "name": "dotToken",
                "type": "number",
                "comment": "标记 '.' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "argument",
                "type": "Identifier",
                "comment": " 参数部分"
            }
        ],
        "params": [
            {
                "name": "target",
                "type": "Expression",
                "comment": "目标部分",
                "value": "",
                "optional": false
            }
        ],
        "name": "MemberCallExpression",
        "comment": "成员调用表达式(x.y)",
        "codes": [
            "_.target = target;",
            "_.dotToken = readToken(tokens.TokenType.dot);",
            "_.argument = Identifier(true);"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "NumericLiteral": {
        "indent": 0,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "value",
                "type": "number",
                "comment": " 值部分"
            }
        ],
        "params": [],
        "name": "NumericLiteral",
        "comment": "数字字面量(`1`)",
        "codes": [
            "_.value = readToken(tokens.TokenType.numericLiteral);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "StringLiteral": {
        "indent": 0,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "value",
                "type": "number",
                "comment": " 值部分"
            }
        ],
        "params": [],
        "name": "StringLiteral",
        "comment": "字符串字面量(`'abc'`、`\"abc\"`、`\\`abc\\``)",
        "codes": [
            "_.value = readToken(tokens.TokenType.stringLiteral);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "Identifier": {
        "indent": 0,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "value",
                "type": "number",
                "comment": " 值部分"
            }
        ],
        "params": [
            {
                "name": "allowKeyword",
                "comment": "是否允许解析关键字",
                "value": "false",
                "optional": false
            }
        ],
        "name": "Identifier",
        "comment": "标识符(`x`)",
        "codes": [
            "let isIdentifier = tokens.isIdentifierName(peek);",
            "if (!isIdentifier && allowKeyword && tokens.isKeyword(peek)) {",
            "\tisIdentifier = true;",
            "\tif (!sameLine && tokens.isStatementStart(peek)) {",
            "\t\tconst savedState = lexer.stashSave();",
            "\t\tStatement();",
            "\t\tif (!savedState.errors.length) {",
            "\t\t\tisIdentifier = false;",
            "\t\t}",
            "\t}",
            "}",
            "if (isIdentifier) {",
            "\t_.value = readToken(tokens.TokenType.identifier);",
            "} else {",
            "\terror(lexer.peek(), tokens.isKeyword(peek) ? \"Identifier expected; Keyword '{0}' cannot be used as an identifier.\" : \"Identifier expected; Unexpected token '{0}'.\", tokens.getTokenName(peek));",
            "}"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "Statement": {
        "indent": 0,
        "fields": [],
        "params": [],
        "name": "Statement",
        "comment": "语句",
        "codes": [
            "switch (peek) {",
            "\tcase '{':",
            "\t\treturn BlockStatement;",
            "\tcase 'var':",
            "\tcase 'const':",
            "\t\treturn VariableStatement;",
            "\tcase 'let':",
            "\t\treturn VariableOrExpressionStatement();",
            "\tcase 'if':",
            "\t\treturn this.parseIfStatement();",
            "\tcase 'for':",
            "\t\treturn this.parseForOrForInOrForOfOrForToStatement();",
            "\tcase 'while':",
            "\t\treturn this.parseWhileStatement();",
            "\tcase 'switch':",
            "\t\treturn this.parseSwitchStatement();",
            "\tcase 'do':",
            "\t\treturn this.parseDoWhileStatement();",
            "\tcase 'break':",
            "\t\treturn BreakStatement;",
            "\tcase 'continue':",
            "\t\treturn ContinueStatement;",
            "\tcase 'return':",
            "\t\treturn this.parseReturnStatement();",
            "\tcase 'throw':",
            "\t\treturn this.parseThrowStatement();",
            "\tcase 'try':",
            "\t\treturn this.parseTryStatement();",
            "\tcase 'debugger':",
            "\t\treturn this.parseDebuggerStatement();",
            "\tcase ';':",
            "\t\treturn EmptyStatement;",
            "\tcase 'endOfFile':",
            "\t\treturn this.parseMissingStatement();",
            "\tcase 'with':",
            "\t\treturn this.parseWithStatement();",
            "\tcase 'import':",
            "\t\treturn ImportAssignmentOrImportDeclaration;",
            "\tcase 'export':",
            "\t\treturn ExportAssignmentOrExportDeclaration;",
            "\tcase 'type':",
            "\t\treturn TypeAliasDeclaration;",
            "\tdefault:",
            "\t\tif (tokens.isDeclarationStart(peek)) {",
            "\t\t\treturn DeclarationOrLabeledOrExpressionStatement;",
            "\t\t}",
            "\t\treturn LabeledOrExpressionStatement;",
            "}"
        ],
        "extend": "Node",
        "abstract": true,
        "list": null,
        "alias": ""
    },
    "VariableOrExpressionStatement": {
        "indent": 3,
        "fields": [],
        "params": [
            {
                "name": "allowIn",
                "type": "boolean",
                "comment": "是否解析 in 表达式",
                "optional": true
            }
        ],
        "name": "VariableOrExpressionStatement",
        "comment": "变量声明(`let x`)或表达式语句(`let(x)`)",
        "codes": [
            "const savedToken = lexer.current;",
            "switch (peek) {",
            "\tcase 'let':",
            "\tcase 'var':",
            "\tcase 'const':",
            "\t\tlexer.read();",
            "\t\tconst isBindingName = tokens.isBindingNameStart(peek);",
            "\t\tlexer.current = savedToken;",
            "\t\tif (isBindingName) {",
            "\t\t\treturn VariableStatement(allowIn);",
            "\t\t}",
            "\t\tbreak;",
            "}",
            "return ExpressionStatement(Expression(tokens.Precedence.any, allowIn));"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "IfStatement": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "ifToken",
                "type": "number",
                "comment": "标记 'if' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "openParenToken",
                "type": "number",
                "comment": "标记 '(' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "condition",
                "type": "Expression"
            },
            {
                "optional": true,
                "inline": "",
                "name": "closeParenToken",
                "type": "number",
                "comment": "标记 ')' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "then",
                "type": "EmbeddedStatement",
                "comment": " 则部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "elseToken",
                "type": "number",
                "comment": "标记 'else' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "else",
                "type": "EmbeddedStatement",
                "comment": " 否则部分"
            }
        ],
        "params": [],
        "name": "IfStatement",
        "comment": "if 语句(`if (x) ...`)",
        "codes": [
            "_.ifToken = readToken(tokens.TokenType.if);",
            "this.parseCondition(_);",
            "_.then = EmbeddedStatement();",
            "if (peek === 'else') {",
            "\t_.elseToken = readToken(tokens.TokenType.else);",
            "\t_.else = EmbeddedStatement();",
            "}"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ForOrForInOrForOfOrForToStatement": {
        "indent": 3,
        "fields": [],
        "params": [],
        "name": "ForOrForInOrForOfOrForToStatement",
        "comment": "for 或 for..in 或 for..of 或 for..to 语句",
        "codes": [
            "const forToken = readToken('for');",
            "const openParenToken = peek === '(' || options.allowMissingParenthese === false ? readToken('(') : undefined;",
            "const initializer: any = peek === ';' ? undefined : VariableOrExpressionStatement(false);",
            "switch (peek) {",
            "\tcase 'in':",
            "\t\treturn this.parseForInStatement(forToken, openParenToken, initializer);",
            "\tcase 'of':",
            "\t\treturn this.parseForOfStatement(forToken, openParenToken, initializer);",
            "\tcase 'to':",
            "\t\treturn this.parseForToStatement(forToken, openParenToken, initializer);",
            "\tdefault:",
            "\t\treturn this.parseForStatement(forToken, openParenToken, initializer);",
            "}"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ForInStatement": {
        "indent": 6,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "forToken",
                "comment": "标记 'for' 的位置",
                "type": "number"
            },
            {
                "inline": "",
                "optional": true,
                "name": "openParenToken",
                "comment": "标记 '(' 的位置",
                "type": "number"
            },
            {
                "inline": "",
                "optional": true,
                "name": "initializer",
                "comment": " 初始值部分",
                "type": "VariableStatement | ExpressionStatement"
            },
            {
                "optional": false,
                "inline": "",
                "name": "inToken",
                "type": "number",
                "comment": "标记 'in' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "condition",
                "type": "Expression"
            },
            {
                "optional": true,
                "inline": "",
                "name": "closeParenToken",
                "type": "number",
                "comment": "标记 ')' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "body",
                "type": "EmbeddedStatement",
                "comment": " 主体部分"
            }
        ],
        "params": [
            {
                "name": "forToken",
                "type": "number",
                "comment": "标记 'for' 的位置",
                "value": "",
                "optional": false
            },
            {
                "name": "openParenToken",
                "type": "number",
                "comment": "标记 '(' 的位置",
                "value": "",
                "optional": true
            },
            {
                "name": "initializer",
                "type": "VariableStatement | ExpressionStatement",
                "comment": " 初始值部分",
                "value": "",
                "optional": true
            }
        ],
        "name": "ForInStatement",
        "comment": "for..in 语句(`for(var x in y) ...`)",
        "codes": [
            "_.forToken = forToken;",
            "if (openParenToken != undefined) {",
            "\t_.openParenToken = openParenToken;",
            "}",
            "if (initializer != undefined) {",
            "\t_.initializer = initializer;",
            "}",
            "_.inToken = readToken(tokens.TokenType.in);",
            "_.condition = Expression();",
            "if (openParenToken != undefined) {",
            "\t_.closeParenToken = readToken(tokens.TokenType.closeParen);",
            "}",
            "_.body = EmbeddedStatement();"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ForOfStatement": {
        "indent": 6,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "forToken",
                "comment": "标记 'for' 的位置",
                "type": "number"
            },
            {
                "inline": "",
                "optional": true,
                "name": "openParenToken",
                "comment": "标记 '(' 的位置",
                "type": "number"
            },
            {
                "inline": "",
                "optional": true,
                "name": "initializer",
                "comment": " 初始值部分",
                "type": "VariableStatement | ExpressionStatement"
            },
            {
                "optional": false,
                "inline": "",
                "name": "ofToken",
                "type": "number",
                "comment": "标记 'of' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "condition",
                "type": "Expression"
            },
            {
                "optional": true,
                "inline": "",
                "name": "closeParenToken",
                "type": "number",
                "comment": "标记 ')' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "body",
                "type": "EmbeddedStatement",
                "comment": " 主体部分"
            }
        ],
        "params": [
            {
                "name": "forToken",
                "type": "number",
                "comment": "标记 'for' 的位置",
                "value": "",
                "optional": false
            },
            {
                "name": "openParenToken",
                "type": "number",
                "comment": "标记 '(' 的位置",
                "value": "",
                "optional": true
            },
            {
                "name": "initializer",
                "type": "VariableStatement | ExpressionStatement",
                "comment": " 初始值部分",
                "value": "",
                "optional": true
            }
        ],
        "name": "ForOfStatement",
        "comment": "for..of 语句(`for(var x of y) ...`)",
        "codes": [
            "_.forToken = forToken;",
            "if (openParenToken != undefined) {",
            "\t_.openParenToken = openParenToken;",
            "}",
            "if (initializer != undefined) {",
            "\t_.initializer = initializer;",
            "}",
            "_.ofToken = readToken(tokens.TokenType.of);",
            "_.condition = Expression();",
            "if (openParenToken != undefined) {",
            "\t_.closeParenToken = readToken(tokens.TokenType.closeParen);",
            "}",
            "_.body = EmbeddedStatement();"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ForToStatement": {
        "indent": 6,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "forToken",
                "comment": "标记 'for' 的位置",
                "type": "number"
            },
            {
                "inline": "",
                "optional": true,
                "name": "openParenToken",
                "comment": "标记 '(' 的位置",
                "type": "number"
            },
            {
                "inline": "",
                "optional": true,
                "name": "initializer",
                "comment": " 初始值部分",
                "type": "VariableStatement | ExpressionStatement"
            },
            {
                "optional": false,
                "inline": "",
                "name": "toToken",
                "type": "number",
                "comment": "标记 'to' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "condition",
                "type": "Expression"
            },
            {
                "optional": true,
                "inline": "",
                "name": "closeParenToken",
                "type": "number",
                "comment": "标记 ')' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "body",
                "type": "EmbeddedStatement",
                "comment": " 主体部分"
            }
        ],
        "params": [
            {
                "name": "forToken",
                "type": "number",
                "comment": "标记 'for' 的位置",
                "value": "",
                "optional": false
            },
            {
                "name": "openParenToken",
                "type": "number",
                "comment": "标记 '(' 的位置",
                "value": "",
                "optional": true
            },
            {
                "name": "initializer",
                "type": "VariableStatement | ExpressionStatement",
                "comment": " 初始值部分",
                "value": "",
                "optional": true
            }
        ],
        "name": "ForToStatement",
        "comment": "for..to 语句(`for(var x = 0 to 10) ...`)",
        "codes": [
            "_.forToken = forToken;",
            "if (openParenToken != undefined) {",
            "\t_.openParenToken = openParenToken;",
            "}",
            "if (initializer != undefined) {",
            "\t_.initializer = initializer;",
            "}",
            "_.toToken = readToken(tokens.TokenType.to);",
            "_.condition = Expression();",
            "if (openParenToken != undefined) {",
            "\t_.closeParenToken = readToken(tokens.TokenType.closeParen);",
            "}",
            "_.body = EmbeddedStatement();"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ForStatement": {
        "indent": 6,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "forToken",
                "comment": "标记 'for' 的位置",
                "type": "number"
            },
            {
                "inline": "",
                "optional": true,
                "name": "openParenToken",
                "comment": "标记 '(' 的位置",
                "type": "number"
            },
            {
                "inline": "",
                "optional": true,
                "name": "initializer",
                "comment": " 初始值部分",
                "type": "VariableStatement | ExpressionStatement"
            },
            {
                "optional": false,
                "inline": "",
                "name": "firstSemicolon",
                "type": "number",
                "comment": " 条件部分中首个分号"
            },
            {
                "optional": true,
                "inline": "",
                "name": "condition",
                "type": "Expression"
            },
            {
                "optional": true,
                "inline": "",
                "name": "iterator",
                "type": "Expression"
            },
            {
                "optional": true,
                "inline": "",
                "name": "closeParenToken",
                "type": "number",
                "comment": "标记 ')' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "body",
                "type": "EmbeddedStatement",
                "comment": " 主体部分"
            }
        ],
        "params": [
            {
                "name": "forToken",
                "type": "number",
                "comment": "标记 'for' 的位置",
                "value": "",
                "optional": false
            },
            {
                "name": "openParenToken",
                "type": "number",
                "comment": "标记 '(' 的位置",
                "value": "",
                "optional": true
            },
            {
                "name": "initializer",
                "type": "VariableStatement | ExpressionStatement",
                "comment": " 初始值部分",
                "value": "",
                "optional": true
            }
        ],
        "name": "ForStatement",
        "comment": "for 语句(`for(var i = 0; i < 9 i++) ...`)",
        "codes": [
            "_.forToken = forToken;",
            "if (openParenToken != undefined) {",
            "\t_.openParenToken = openParenToken;",
            "}",
            "if (initializer != undefined) {",
            "\t_.initializer = initializer;",
            "}",
            "_.firstSemicolon = readToken(tokens.TokenType.semicolon);",
            "if (peek !== ';') {",
            "\t_.condition = Expression();",
            "}",
            "if (openParenToken == undefined ? tokens.isExpressionStart(peek) : peek !== ')') {",
            "\t_.iterator = Expression();",
            "}",
            "if (openParenToken != undefined) {",
            "\t_.closeParenToken = readToken(tokens.TokenType.closeParen);",
            "}",
            "_.body = EmbeddedStatement();"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "WhileStatement": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "whileToken",
                "type": "number",
                "comment": "标记 'while' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "openParenToken",
                "type": "number",
                "comment": "标记 '(' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "condition",
                "type": "Expression"
            },
            {
                "optional": true,
                "inline": "",
                "name": "closeParenToken",
                "type": "number",
                "comment": "标记 ')' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "body",
                "type": "EmbeddedStatement",
                "comment": " 主体部分"
            }
        ],
        "params": [],
        "name": "WhileStatement",
        "comment": "while 语句(`while(x) ...`)",
        "codes": [
            "_.whileToken = readToken(tokens.TokenType.while);",
            "this.parseCondition(_);",
            "_.body = EmbeddedStatement();"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "SwitchStatement": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "cases",
                "type": "nodes.NodeList<CaseOrDefaultClause>"
            }
        ],
        "params": [],
        "name": "SwitchStatement",
        "comment": "switch 语句(`switch(x) {...}`)",
        "codes": [
            "if (options.allowMissingSwitchCondition === false || peek !== '{') {",
            "\tCondition(_);",
            "}",
            "_.cases = this.parseNodeList(CaseOrDefaultClause, '{', '}')"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "CaseOrDefaultClause": {
        "indent": 4,
        "fields": [],
        "params": [],
        "name": "CaseOrDefaultClause",
        "comment": "case(`case x: ...`) 或 default(`default: ...`) 分支",
        "codes": [
            "switch (peek) {",
            "\tcase 'case':",
            "\t\treturn this.parseCaseClause();",
            "\tcase 'default':",
            "\t\treturn this.parseDefaultClause();",
            "\tdefault:",
            "\t\terror(lexer.peek(), \"'case' or 'default' expected; Unexpected token '{0}'.\", tokens.getTokenName(peek));",
            "\t\treturn;",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "CaseClause": {
        "indent": 7,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "caseToken",
                "type": "number",
                "comment": "标记 'case' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "labels",
                "type": "nodes.NodeList<CaseClauseLabel>",
                "comment": " 标签列表"
            },
            {
                "optional": false,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "statements",
                "type": "nodes.NodeList<undefined>"
            }
        ],
        "params": [],
        "name": "CaseClause",
        "comment": "case 分支(`case x: ...`)",
        "codes": [
            "_.caseToken = readToken(tokens.TokenType.case);",
            "_.labels = this.parseDelimitedList(CaseClauseLabel, , , false, tokens.isCaseLabelStart);",
            "_.colonToken = readToken(tokens.TokenType.colon);",
            "_.statements = this.parseNodeList(CaseStatement, , )"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "CaseClauseLabel": {
        "indent": 8,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "elseToken",
                "type": "number",
                "comment": "标记 'else' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "label",
                "type": "Expression"
            }
        ],
        "params": [],
        "name": "CaseClauseLabel",
        "comment": "case 分支标签(`case x: ...`)",
        "codes": [
            "if (peek === 'else') {",
            "\t_.elseToken = readToken(tokens.TokenType.else);",
            "} else {",
            "\t_.label = Expression(tokens.Precedence.assignment);",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "DefaultClause": {
        "indent": 7,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "defaultToken",
                "type": "number",
                "comment": "标记 'default' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "statements",
                "type": "nodes.NodeList<undefined>"
            }
        ],
        "params": [],
        "name": "DefaultClause",
        "comment": "default 分支(`default: ...`)",
        "codes": [
            "_.defaultToken = readToken(tokens.TokenType.default);",
            "_.colonToken = readToken(tokens.TokenType.colon);",
            "_.statements = this.parseNodeList(CaseStatement, , )"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "CaseStatement": {
        "indent": 5,
        "fields": [],
        "params": [],
        "name": "CaseStatement",
        "comment": "case 段语句",
        "codes": [
            "switch (peek) {",
            "\tcase 'case':",
            "\tcase 'default':",
            "\tcase '}':",
            "\tcase 'endOfFile':",
            "\t\treturn;",
            "\tdefault:",
            "\t\treturn Statement();",
            "}"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "DoWhileStatement": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "doToken",
                "type": "number",
                "comment": "标记 'do' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "body",
                "type": "EmbeddedStatement",
                "comment": " 主体部分"
            },
            {
                "optional": false,
                "inline": "",
                "name": "whileToken",
                "type": "number",
                "comment": "标记 'while' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "openParenToken",
                "type": "number",
                "comment": "标记 '(' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "condition",
                "type": "Expression"
            },
            {
                "optional": true,
                "inline": "",
                "name": "closeParenToken",
                "type": "number",
                "comment": "标记 ')' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            }
        ],
        "params": [],
        "name": "DoWhileStatement",
        "comment": "do..while 语句(`do ... while(x)`)",
        "codes": [
            "_.doToken = readToken(tokens.TokenType.do);",
            "_.body = EmbeddedStatement();",
            "_.whileToken = readToken(tokens.TokenType.while);",
            "this.parseCondition(_);",
            "this.parseSemicolon(_);"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "BreakStatement": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "breakToken",
                "type": "number",
                "comment": "标记 'break' 的位置"
            },
            {
                "inline": "",
                "optional": false,
                "name": "_",
                "comment": " 解析的目标节点 ",
                "type": "BreakStatement | ContinueStatement"
            },
            {
                "optional": true,
                "inline": "",
                "name": "label",
                "type": "Identifier"
            }
        ],
        "params": [],
        "name": "BreakStatement",
        "comment": "break 语句(`break xx`)",
        "codes": [
            "_.breakToken = readToken(tokens.TokenType.break);",
            "this.parseBreakOrContinueStatement(_);"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ContinueStatement": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "continueToken",
                "type": "number",
                "comment": "标记 'continue' 的位置"
            },
            {
                "inline": "",
                "optional": false,
                "name": "_",
                "comment": " 解析的目标节点 ",
                "type": "BreakStatement | ContinueStatement"
            },
            {
                "optional": true,
                "inline": "",
                "name": "label",
                "type": "Identifier"
            }
        ],
        "params": [],
        "name": "ContinueStatement",
        "comment": "continue 语句(`continue xx`)",
        "codes": [
            "_.continueToken = readToken(tokens.TokenType.continue);",
            "this.parseBreakOrContinueStatement(_);"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "BreakOrContinueStatement": {
        "indent": 3,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "_",
                "comment": " 解析的目标节点 ",
                "type": "BreakStatement | ContinueStatement"
            },
            {
                "optional": true,
                "inline": "",
                "name": "label",
                "type": "Identifier"
            }
        ],
        "params": [
            {
                "name": "_",
                "type": "BreakStatement | ContinueStatement",
                "comment": " 解析的目标节点 ",
                "value": "",
                "optional": false
            }
        ],
        "name": "BreakOrContinueStatement",
        "comment": "break 或 continue语句(`break xx;`、`continue xx`)",
        "codes": [
            "_._ = _;",
            "if (!Semicolon(_)) {",
            "\t_.label = Identifier();",
            "\tSemicolon(_);",
            "}"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ReturnStatement": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "returnToken",
                "type": "number",
                "comment": "标记 'return' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "value",
                "type": "Expression",
                "comment": " 值部分"
            }
        ],
        "params": [],
        "name": "ReturnStatement",
        "comment": "return 语句(`return x`)",
        "codes": [
            "_.returnToken = readToken(tokens.TokenType.return);",
            "if (!Semicolon(_)) {",
            "\t_.value = Expression();",
            "\tSemicolon(_);",
            "}"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ThrowStatement": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "throwToken",
                "type": "number",
                "comment": "标记 'throw' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "value",
                "type": "Expression",
                "comment": " 值部分"
            }
        ],
        "params": [],
        "name": "ThrowStatement",
        "comment": "throw 语句(`throw x`)",
        "codes": [
            "_.throwToken = readToken(tokens.TokenType.throw);",
            "if (!Semicolon(_)) {",
            "\t_.value = Expression();",
            "\t!Semicolon(_);",
            "}"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "TryStatement": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "tryToken",
                "type": "number",
                "comment": "标记 'try' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "try",
                "type": "EmbeddedStatement"
            }
        ],
        "params": [],
        "name": "TryStatement",
        "comment": "try 语句(`try {...} catch(e) {...}`)",
        "codes": [
            "_.tryToken = readToken(tokens.TokenType.try);",
            "_.try = EmbeddedStatement();",
            "if (peek === 'catch') {",
            "\t_.catch = this.parseCatchClause();",
            "}",
            "if (peek === 'finally') {",
            "\t_.finally = this.parseFinallyClause();",
            "}",
            "if (options.allowSimpleTryBlock === false && !_.catch && !_.finally) {",
            "\terror(lexer.peek(), \"'catch' or 'finally' expected. Unexpected token '{0}'.\", tokens.getTokenName(peek));",
            "}"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "CatchClause": {
        "indent": 5,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "catchToken",
                "type": "number",
                "comment": "标记 'catch' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "variable",
                "type": "BindingName",
                "comment": "别名"
            },
            {
                "optional": false,
                "inline": "",
                "name": "body",
                "type": "EmbeddedStatement",
                "comment": " 主体部分"
            }
        ],
        "params": [],
        "name": "CatchClause",
        "comment": "catch 分句(`catch(e) {...}`)",
        "codes": [
            "_.catchToken = readToken(tokens.TokenType.catch);",
            "const hasParan = peek === '(';",
            "if (hasParan || options.allowMissingParenthese === false) {",
            "\t_('(');",
            "}",
            "if (tokens.isBindingNameStart(peek)) {",
            "\t_.variable = BindingName();",
            "\tif (peek === ':') {",
            "\t\terror(peek, \"Catch variable cannot have a type annotation; Unexpected token ':'.\");",
            "\t\tlexer.read();",
            "\t\tif (tokens.isTypeNodeStart(peek)) {",
            "\t\t\tTypeNode;",
            "\t\t}",
            "\t}",
            "}",
            "if (hasParan) {",
            "\t_(')');",
            "}",
            "_.body = EmbeddedStatement();"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "FinallyClause": {
        "indent": 5,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "finallyToken",
                "type": "number",
                "comment": "标记 'finally' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "body",
                "type": "EmbeddedStatement",
                "comment": " 主体部分"
            }
        ],
        "params": [],
        "name": "FinallyClause",
        "comment": "finally 分句(`finally {...}`)",
        "codes": [
            "_.finallyToken = readToken(tokens.TokenType.finally);",
            "_.body = EmbeddedStatement();"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "DebuggerStatement": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "debuggerToken",
                "type": "number",
                "comment": "标记 'debugger' 的位置"
            }
        ],
        "params": [],
        "name": "DebuggerStatement",
        "comment": "debugger 语句(`debugger`)",
        "codes": [
            "_.debuggerToken = readToken(tokens.TokenType.debugger);",
            "Semicolon(';');"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "EmptyStatement": {
        "indent": 3,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            }
        ],
        "params": [],
        "name": "EmptyStatement",
        "comment": "空语句(``)",
        "codes": [
            "this.parseSemicolon(_);"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "MissingStatement": {
        "indent": 3,
        "fields": [],
        "params": [],
        "name": "MissingStatement",
        "comment": "缺少语句",
        "codes": [
            "error(lexer.peek(), \"Statement Or Declaration expected. Unexpected end of file.\");"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "WithStatement": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "withToken",
                "type": "number",
                "comment": "标记 'with' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "value",
                "type": "VariableOrExpressionStatement",
                "comment": " 值部分"
            },
            {
                "optional": false,
                "inline": "",
                "name": "body",
                "type": "EmbeddedStatement",
                "comment": " 主体部分"
            }
        ],
        "params": [],
        "name": "WithStatement",
        "comment": "with 语句(`with (x) ...`)",
        "codes": [
            "_.withToken = readToken(tokens.TokenType.with);",
            "const hasParan = peek === '(';",
            "if (hasParan) {",
            "\t_('(');",
            "}",
            "_.value = VariableOrExpressionStatement();",
            "if (hasParan) {",
            "\t_(')');",
            "}",
            "_.body = EmbeddedStatement();"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "Condition": {
        "indent": 1,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "openParenToken",
                "type": "number",
                "comment": "标记 '(' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "condition",
                "type": "Expression"
            },
            {
                "optional": true,
                "inline": "",
                "name": "closeParenToken",
                "type": "number",
                "comment": "标记 ')' 的位置"
            }
        ],
        "params": [
            {
                "name": "_",
                "type": "BreakStatement | ContinueStatement",
                "comment": " 解析的目标节点 ",
                "optional": false
            }
        ],
        "name": "Condition",
        "comment": "条件表达式",
        "codes": [
            "const hasParan = peek === '(';",
            "if (hasParan || options.allowMissingParenthese === false) {",
            "\t_.openParenToken = readToken(tokens.TokenType.openParen);",
            "}",
            "_.condition = Expression();",
            "if (hasParan) {",
            "\t_.closeParenToken = readToken(tokens.TokenType.closeParen);",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "EmbeddedStatement": {
        "indent": 1,
        "fields": [],
        "params": [],
        "name": "EmbeddedStatement",
        "comment": "内嵌语句",
        "codes": [
            "return Statement;"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": "Statement"
    },
    "LabeledOrExpressionStatement": {
        "indent": 0,
        "fields": [],
        "params": [],
        "name": "LabeledOrExpressionStatement",
        "comment": "表达式或标签语句",
        "codes": [
            "const parsed = Expression;",
            "if (parsed.constructor === Identifier && peek === ':') {",
            "\treturn LabelledStatement(<Identifier>parsed);",
            "}",
            "return ExpressionStatement(parsed);"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "LabelledStatement": {
        "indent": 2,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "label",
                "type": "Identifier"
            },
            {
                "optional": false,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "statement",
                "type": "Statement",
                "comment": " 主体部分"
            }
        ],
        "params": [
            {
                "name": "label",
                "type": "Identifier",
                "value": "",
                "optional": false
            }
        ],
        "name": "LabelledStatement",
        "comment": "标签语句(`x: ...`)",
        "codes": [
            "_.label = label;",
            "this.parseDocComment(_);",
            "_.colonToken = readToken(tokens.TokenType.colon);",
            "_.statement = Statement();"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "VariableStatement": {
        "indent": 0,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "optional": false,
                "inline": "",
                "name": "type",
                "type": "number",
                "comment": " 类型"
            },
            {
                "optional": false,
                "inline": "",
                "name": "variables",
                "type": "nodes.NodeList<undefined>",
                "comment": "别名"
            }
        ],
        "params": [
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            },
            {
                "name": "allowIn",
                "type": "boolean",
                "comment": "是否解析 in 表达式",
                "optional": true
            }
        ],
        "name": "VariableStatement",
        "comment": "变量声明语句(`var x`、`let x`、`const x`)",
        "codes": [
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "_.type = this.lexer.read(); // var、let、const",
            "_.variables = this.parseNodeList(allowIn !== false ? VariableDeclaration : (, , )"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "VariableDeclaration": {
        "indent": 1,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "mame",
                "type": "BindingName"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            }
        ],
        "params": [
            {
                "name": "allowIn",
                "type": "boolean",
                "comment": "是否解析 in 表达式",
                "optional": true
            }
        ],
        "name": "VariableDeclaration",
        "comment": "变量声明(`x = 1`、`[x] = [1]`、`{a: x} = {a: 1}`)",
        "codes": [
            "_.mame = BindingName();",
            "this.parseTypeAnnotation(_);",
            "Initializer(_, allowIn);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ExpressionStatement": {
        "indent": 0,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "expression",
                "comment": "表达式部分",
                "type": "Expression"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            }
        ],
        "params": [
            {
                "name": "expression",
                "type": "Expression",
                "comment": "表达式部分",
                "value": "",
                "optional": false
            }
        ],
        "name": "ExpressionStatement",
        "comment": "表达式语句(`x()`)",
        "codes": [
            "_.expression = expression;",
            "this.parseSemicolon(_);"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "BlockStatement": {
        "indent": 0,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "statements",
                "type": "nodes.NodeList<Statement>"
            }
        ],
        "params": [],
        "name": "BlockStatement",
        "comment": "语句块(`{...}`)",
        "codes": [
            "_.statements = this.parseNodeList(Statement, '{', '}')"
        ],
        "extend": "Statement",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "Semicolon": {
        "indent": 0,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            }
        ],
        "params": [
            {
                "name": "_",
                "type": "BreakStatement | ContinueStatement",
                "comment": " 解析的目标节点 ",
                "optional": false
            }
        ],
        "name": "Semicolon",
        "comment": "分号",
        "codes": [
            "switch (lexer.peek().type) {",
            "\tcase ';':",
            "\t\tif (peek === ';') {",
            "\t\t\t_.semicolonToken = readToken(tokens.TokenType.semicolon);;",
            "\t\t}",
            "\t\treturn true;",
            "\tcase '}':",
            "\tcase 'endOfFile':",
            "\t\tif (options.allowMissingSemicolon !== false) {",
            "\t\t\treturn true;",
            "\t\t}",
            "\t\tbreak;",
            "}",
            "error({ start: lexer.current.end, end: lexer.current.end }, \"Missing ';' after statement.\");",
            "return false;"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "Declaration": {
        "indent": 0,
        "fields": [],
        "params": [],
        "name": "Declaration",
        "comment": "声明",
        "codes": [],
        "extend": "Statement",
        "abstract": true,
        "list": null,
        "alias": ""
    },
    "DeclarationOrLabeledOrExpressionStatement": {
        "indent": 0,
        "fields": [],
        "params": [],
        "name": "DeclarationOrLabeledOrExpressionStatement",
        "comment": "声明或表达式语句",
        "codes": [
            "const savedState = lexer.stashSave();",
            "const decorators = Decorators();",
            "const modifiers = Modifiers();",
            "switch (peek) {",
            "\tcase 'function':",
            "\t\tlexer.stashClear(savedState);",
            "\t\treturn FunctionDeclaration(decorators, modifiers);",
            "\tcase 'class':",
            "\t\tlexer.stashClear(savedState);",
            "\t\treturn ClassDeclaration(decorators, modifiers);",
            "\tcase 'interface':",
            "\t\tlexer.stashClear(savedState);",
            "\t\treturn InterfaceDeclaration(decorators, modifiers);",
            "\tcase 'enum':",
            "\t\tlexer.stashClear(savedState);",
            "\t\treturn EnumDeclaration(decorators, modifiers);",
            "\tcase 'namespace':",
            "\t\tlexer.stashClear(savedState);",
            "\t\treturn NamespaceDeclaration(decorators, modifiers);",
            "\tcase 'module':",
            "\t\tlexer.stashClear(savedState);",
            "\t\treturn ModuleDeclaration(decorators, modifiers);",
            "\tcase 'extends':",
            "\t\tlexer.stashClear(savedState);",
            "\t\treturn ExtensionDeclaration(decorators, modifiers);",
            "\tdefault:",
            "\t\tlexer.stashRestore(savedState);",
            "\t\treturn LabeledOrExpressionStatement;",
            "}"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "Decorators": {
        "indent": 0,
        "fields": [],
        "params": [],
        "name": "Decorators",
        "comment": "修饰器列表",
        "codes": [
            "let result: NodeList<Decorator>;",
            "while (peek === '') {",
            "\tif (!result) result = list(Decorator);",
            "\tresult.push(Decorator());",
            "}",
            "return result;"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "Decorator": {
        "indent": 1,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "atToken",
                "type": "number",
                "comment": "标记 '@' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "body",
                "type": "Expression",
                "comment": " 主体部分"
            }
        ],
        "params": [],
        "name": "Decorator",
        "comment": "修饰器(`x`)",
        "codes": [
            "_.atToken = readToken(tokens.TokenType.at);",
            "_.body = Expression(tokens.Precedence.leftHandSide);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "Modifiers": {
        "indent": 0,
        "fields": [],
        "params": [],
        "name": "Modifiers",
        "comment": "修饰符列表",
        "codes": [
            "let result: NodeList<Modifier>;",
            "while (tokens.isModifier(peek)) {",
            "\tconst savedToken = lexer.current;",
            "\tconst modifier: any = Modifier;",
            "\tswitch (modifier.type) {",
            "\t\tcase 'export':",
            "\t\t\tif (!result) result = list(Modifier);",
            "\t\t\tresult.push(modifier);",
            "\t\t\tif (peek === 'default') {",
            "\t\t\t\tresult.push(Modifier);",
            "\t\t\t}",
            "\t\t\tcontinue;",
            "\t\tcase 'const':",
            "\t\t\tif (peek === 'enum') {",
            "\t\t\t\tif (!result) result = list(Modifier);",
            "\t\t\t\tresult.push(modifier);",
            "\t\t\t\tcontinue;",
            "\t\t\t}",
            "\t\t\tbreak;",
            "\t\tdefault:",
            "\t\t\tif (sameLine) {",
            "\t\t\t\tif (!result) result = list(Modifier);",
            "\t\t\t\tresult.push(modifier);",
            "\t\t\t\tcontinue;",
            "\t\t\t}",
            "\t\t\tbreak;",
            "\t}",
            "\tlexer.current = savedToken;",
            "\tbreak;",
            "}",
            "return result;"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "Modifier": {
        "indent": 1,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "type",
                "type": "number",
                "comment": " 类型"
            }
        ],
        "params": [],
        "name": "Modifier",
        "comment": "修饰符(`static`、`private`、...)",
        "codes": [
            "_.type = this.lexer.read(); // export、default、declare、const、static、abstract、readonly、async、public、protected、private"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "FunctionDeclaration": {
        "indent": 0,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "decorators",
                "type": "Decorators"
            },
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            }
        ],
        "params": [
            {
                "name": "decorators",
                "type": "Decorators",
                "value": "",
                "optional": true
            },
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            }
        ],
        "name": "FunctionDeclaration",
        "comment": "函数声明(`function fn() {...}`、`function *fn() {...}`)",
        "codes": [
            "if (decorators != undefined) {",
            "\t_.decorators = decorators;",
            "}",
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "FunctionDeclarationOrExpression(_, modifiers);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "FunctionExpression": {
        "indent": 0,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            }
        ],
        "params": [
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            }
        ],
        "name": "FunctionExpression",
        "comment": "函数表达式(`function () {}`)",
        "codes": [
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "FunctionDeclarationOrExpression(_, modifiers);"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "FunctionDeclarationOrExpression": {
        "indent": 0,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "_",
                "comment": " 解析的目标节点 ",
                "type": "FunctionDeclaration | FunctionExpression"
            },
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "optional": false,
                "inline": "",
                "name": "functionToken",
                "type": "number",
                "comment": "标记 'function' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "asteriskToken",
                "type": "number",
                "comment": "标记 '*' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "name",
                "type": "Identifier",
                "comment": " 名字部分 "
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>"
            },
            {
                "optional": false,
                "inline": "",
                "name": "parameters",
                "type": "nodes.NodeList<ParameterDeclaration>",
                "comment": "参数部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "body",
                "type": "BlockStatement | Expression",
                "comment": " 主体部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "equalsGreaterThanToken",
                "type": "number",
                "comment": "标记 '=>' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "body",
                "type": "BlockStatement | Expression",
                "comment": " 主体部分"
            }
        ],
        "params": [
            {
                "name": "_",
                "type": "FunctionDeclaration | FunctionExpression",
                "comment": " 解析的目标节点 ",
                "value": "",
                "optional": false
            },
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            }
        ],
        "name": "FunctionDeclarationOrExpression",
        "comment": "函数声明或表达式",
        "codes": [
            "_._ = _;",
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "this.parseDocComment(_);",
            "_.functionToken = readToken(tokens.TokenType.function);",
            "if (peek === '*') {",
            "\t_.asteriskToken = readToken(tokens.TokenType.asterisk);;",
            "}",
            "if (tokens.isIdentifierName, tokens.isTypeNodeStart(peek)) {",
            "\t_.name = Identifier();",
            "}",
            "this.parseTypeAnnotation(_);",
            "this.parseCallSignature(_);",
            "this.parseFunctionBody(_);"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "CallSignature": {
        "indent": 0,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>"
            },
            {
                "optional": false,
                "inline": "",
                "name": "parameters",
                "type": "nodes.NodeList<ParameterDeclaration>",
                "comment": "参数部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            }
        ],
        "params": [
            {
                "name": "_",
                "type": "BreakStatement | ContinueStatement",
                "comment": " 解析的目标节点 ",
                "optional": false
            }
        ],
        "name": "CallSignature",
        "comment": "函数签名(`(): number`)",
        "codes": [
            "if (peek === '<') {",
            "\t_.typeParameters = TypeParameters();",
            "}",
            "_.parameters = Parameters();",
            "this.parseTypeAnnotation(_);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "FunctionBody": {
        "indent": 0,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "body",
                "type": "BlockStatement | Expression",
                "comment": " 主体部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "equalsGreaterThanToken",
                "type": "number",
                "comment": "标记 '=>' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "body",
                "type": "BlockStatement | Expression",
                "comment": " 主体部分"
            }
        ],
        "params": [
            {
                "name": "_",
                "type": "BreakStatement | ContinueStatement",
                "comment": " 解析的目标节点 ",
                "optional": false
            }
        ],
        "name": "FunctionBody",
        "comment": "函数主体(`{...}`、`=> xx`、``)",
        "codes": [
            "switch (peek) {",
            "\tcase '{':",
            "\t\t_.body = BlockStatement;",
            "\t\tbreak;",
            "\tcase '=>':",
            "\t\t_.equalsGreaterThanToken = readToken(tokens.TokenType.equalsGreaterThan);",
            "\t\t_.body = Expression(tokens.Precedence.assignment);",
            "\t\tbreak;",
            "\tdefault:",
            "\t\tSemicolon(_);",
            "\t\tbreak;",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ClassDeclaration": {
        "indent": 0,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "decorators",
                "type": "Decorators"
            },
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "inline": "",
                "optional": false,
                "name": "_",
                "comment": " 解析的目标节点 ",
                "type": "ClassDeclaration | ClassExpression"
            },
            {
                "optional": false,
                "inline": "",
                "name": "classToken",
                "type": "number",
                "comment": "标记 'class' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "name",
                "type": "Identifier",
                "comment": " 名字部分 "
            },
            {
                "optional": true,
                "inline": "",
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>"
            },
            {
                "optional": true,
                "inline": "",
                "name": "extendsToken",
                "type": "number",
                "comment": "标记 'extends' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "extends",
                "type": "nodes.NodeList<ClassHeritageNode>"
            },
            {
                "optional": true,
                "inline": "",
                "name": "implementsToken",
                "type": "number",
                "comment": "标记 'implements' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "implements",
                "type": "nodes.NodeList<ClassHeritageNode>"
            },
            {
                "optional": true,
                "inline": "",
                "name": "members",
                "type": "nodes.NodeList<ClassElement>"
            }
        ],
        "params": [
            {
                "name": "decorators",
                "type": "Decorators",
                "value": "",
                "optional": true
            },
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            }
        ],
        "name": "ClassDeclaration",
        "comment": "类声明(`class xx {}`)",
        "codes": [
            "if (decorators != undefined) {",
            "\t_.decorators = decorators;",
            "}",
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "this.parseClassDeclarationOrExpression(_);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ClassExpression": {
        "indent": 0,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "_",
                "comment": " 解析的目标节点 ",
                "type": "ClassDeclaration | ClassExpression"
            },
            {
                "optional": false,
                "inline": "",
                "name": "classToken",
                "type": "number",
                "comment": "标记 'class' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "name",
                "type": "Identifier",
                "comment": " 名字部分 "
            },
            {
                "optional": true,
                "inline": "",
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>"
            },
            {
                "optional": true,
                "inline": "",
                "name": "extendsToken",
                "type": "number",
                "comment": "标记 'extends' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "extends",
                "type": "nodes.NodeList<ClassHeritageNode>"
            },
            {
                "optional": true,
                "inline": "",
                "name": "implementsToken",
                "type": "number",
                "comment": "标记 'implements' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "implements",
                "type": "nodes.NodeList<ClassHeritageNode>"
            },
            {
                "optional": true,
                "inline": "",
                "name": "members",
                "type": "nodes.NodeList<ClassElement>"
            }
        ],
        "params": [],
        "name": "ClassExpression",
        "comment": "类表达式(`class xx {}`)",
        "codes": [
            "this.parseClassDeclarationOrExpression(_);"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ClassDeclarationOrExpression": {
        "indent": 0,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "_",
                "comment": " 解析的目标节点 ",
                "type": "ClassDeclaration | ClassExpression"
            },
            {
                "optional": false,
                "inline": "",
                "name": "classToken",
                "type": "number",
                "comment": "标记 'class' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "name",
                "type": "Identifier",
                "comment": " 名字部分 "
            },
            {
                "optional": true,
                "inline": "",
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>"
            },
            {
                "optional": true,
                "inline": "",
                "name": "extendsToken",
                "type": "number",
                "comment": "标记 'extends' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "extends",
                "type": "nodes.NodeList<ClassHeritageNode>"
            },
            {
                "optional": true,
                "inline": "",
                "name": "implementsToken",
                "type": "number",
                "comment": "标记 'implements' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "implements",
                "type": "nodes.NodeList<ClassHeritageNode>"
            },
            {
                "optional": true,
                "inline": "",
                "name": "members",
                "type": "nodes.NodeList<ClassElement>"
            }
        ],
        "params": [
            {
                "name": "_",
                "type": "ClassDeclaration | ClassExpression",
                "comment": " 解析的目标节点 ",
                "value": "",
                "optional": false
            }
        ],
        "name": "ClassDeclarationOrExpression",
        "comment": "类声明或类表达式",
        "codes": [
            "_._ = _;",
            "this.parseDocComment(_);",
            "_.classToken = readToken(tokens.TokenType.class);",
            "if (tokens.isIdentifierName, tokens.isTypeNodeStart(peek) && peek !== 'extends' && peek !== 'implements') {",
            "\t_.name = Identifier();",
            "}",
            "if (peek === '<') {",
            "\t_.typeParameters = TypeParameters();",
            "}",
            "this.parseExtendsClause(_);",
            "this.parseImplementsClause(_);",
            "this.parseClassBody(_);"
        ],
        "extend": "Expression",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ClassBody": {
        "indent": 0,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "members",
                "type": "nodes.NodeList<ClassElement>"
            }
        ],
        "params": [
            {
                "name": "_",
                "type": "BreakStatement | ContinueStatement",
                "comment": " 解析的目标节点 ",
                "optional": false
            }
        ],
        "name": "ClassBody",
        "comment": "类主体(`{...}`、``)",
        "codes": [
            "if (peek === '{') {",
            "\t_.members = this.parseNodeList(ClassElement, '{', '}')",
            "} else {",
            "\tSemicolon(_);",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ClassElement": {
        "indent": 2,
        "fields": [],
        "params": [],
        "name": "ClassElement",
        "comment": "类成员",
        "codes": [
            "const decorators = Decorators;",
            "const modifiers = Modifiers;",
            "switch (peek) {",
            "\tcase 'identifier':",
            "\t\tbreak;",
            "\tcase 'get':",
            "\tcase 'set':",
            "\t\tconst savedToken = lexer.current;",
            "\t\tlexer.read();",
            "\t\tif (tokens.isPropertyNameStart(peek)) {",
            "\t\t\treturn AccessorDeclaration(decorators, modifiers, savedToken.type === 'get' ? savedToken.start : undefined, savedToken.type === 'set' ? savedToken.start : undefined);",
            "\t\t}",
            "\t\tlexer.current = savedToken;",
            "\t\tbreak;",
            "\tcase '*':",
            "\t\treturn MethodDeclaration(decorators, modifiers, read, PropertyName);",
            "}",
            "const name = PropertyName;",
            "switch (peek) {",
            "\tcase '(':",
            "\tcase '<':",
            "\t\treturn MethodDeclaration(decorators, modifiers, undefined, name);",
            "\tdefault:",
            "\t\treturn PropertyDeclaration(decorators, modifiers, name);",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": "MethodDeclaration, PropertyDeclaration, AccessorDeclaration"
    },
    "AccessorDeclaration": {
        "indent": 6,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "decorators",
                "type": "Decorators"
            },
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "inline": "",
                "optional": true,
                "name": "getToken",
                "comment": "标记 'get' 的位置",
                "type": "number"
            },
            {
                "inline": "",
                "optional": true,
                "name": "setToken",
                "comment": "标记 'set' 的位置",
                "type": "number"
            },
            {
                "optional": false,
                "inline": "",
                "name": "name",
                "type": "PropertyName",
                "comment": " 名字部分 "
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "body",
                "type": "BlockStatement | Expression",
                "comment": " 主体部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "equalsGreaterThanToken",
                "type": "number",
                "comment": "标记 '=>' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "body",
                "type": "BlockStatement | Expression",
                "comment": " 主体部分"
            }
        ],
        "params": [
            {
                "name": "decorators",
                "type": "Decorators",
                "value": "",
                "optional": true
            },
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            },
            {
                "name": "getToken",
                "type": "number",
                "comment": "标记 'get' 的位置",
                "value": "",
                "optional": true
            },
            {
                "name": "setToken",
                "type": "number",
                "comment": "标记 'set' 的位置",
                "value": "",
                "optional": true
            }
        ],
        "name": "AccessorDeclaration",
        "comment": "访问器声明(`get x() {...}`、`set x(value) {...}`)",
        "codes": [
            "if (decorators != undefined) {",
            "\t_.decorators = decorators;",
            "}",
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "if (getToken != undefined) {",
            "\t_.getToken = getToken;",
            "}",
            "if (setToken != undefined) {",
            "\t_.setToken = setToken;",
            "}",
            "this.parseDocComment(_);",
            "_.name = PropertyName();",
            "Parameters",
            "this.parseTypeAnnotation(_);",
            "this.parseFunctionBody(_);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "MethodDeclaration": {
        "indent": 5,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "decorators",
                "type": "Decorators"
            },
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "inline": "",
                "optional": true,
                "name": "asteriskToken",
                "comment": "标记 '*' 的位置",
                "type": "number"
            },
            {
                "inline": "",
                "optional": false,
                "name": "name",
                "comment": " 名字部分 ",
                "type": "PropertyName"
            },
            {
                "optional": true,
                "inline": "",
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>"
            },
            {
                "optional": false,
                "inline": "",
                "name": "parameters",
                "type": "nodes.NodeList<ParameterDeclaration>",
                "comment": "参数部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "body",
                "type": "BlockStatement | Expression",
                "comment": " 主体部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "equalsGreaterThanToken",
                "type": "number",
                "comment": "标记 '=>' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "body",
                "type": "BlockStatement | Expression",
                "comment": " 主体部分"
            }
        ],
        "params": [
            {
                "name": "decorators",
                "type": "Decorators",
                "value": "",
                "optional": true
            },
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            },
            {
                "name": "asteriskToken",
                "type": "number",
                "comment": "标记 '*' 的位置",
                "value": "",
                "optional": true
            },
            {
                "name": "name",
                "type": "PropertyName",
                "comment": " 名字部分 ",
                "value": "",
                "optional": false
            }
        ],
        "name": "MethodDeclaration",
        "comment": "方法声明(`x() {...}`)",
        "codes": [
            "if (decorators != undefined) {",
            "\t_.decorators = decorators;",
            "}",
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "if (asteriskToken != undefined) {",
            "\t_.asteriskToken = asteriskToken;",
            "}",
            "_.name = name;",
            "this.parseDocComment(_);",
            "this.parseCallSignature(_);",
            "this.parseFunctionBody(_);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "PropertyDeclaration": {
        "indent": 5,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "decorators",
                "type": "Decorators"
            },
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "inline": "",
                "optional": false,
                "name": "name",
                "comment": " 名字部分 ",
                "type": "PropertyName"
            },
            {
                "optional": true,
                "inline": "",
                "name": "colonToken",
                "type": "number",
                "comment": "标记 ':' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "equalsToken",
                "type": "number",
                "comment": "标记 '=' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "initializer",
                "type": "Expression",
                "comment": " 初始值部分"
            }
        ],
        "params": [
            {
                "name": "decorators",
                "type": "Decorators",
                "value": "",
                "optional": true
            },
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            },
            {
                "name": "name",
                "type": "PropertyName",
                "comment": " 名字部分 ",
                "value": "",
                "optional": false
            }
        ],
        "name": "PropertyDeclaration",
        "comment": "属性声明(`x: number`)",
        "codes": [
            "if (decorators != undefined) {",
            "\t_.decorators = decorators;",
            "}",
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "_.name = name;",
            "this.parseDocComment(_);",
            "this.parseTypeAnnotation(_);",
            "this.parseInitializer(_);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "InterfaceDeclaration": {
        "indent": 0,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "decorators",
                "type": "Decorators"
            },
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "optional": false,
                "inline": "",
                "name": "interfaceToken",
                "type": "number",
                "comment": "标记 'interface' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "name",
                "type": "Identifier",
                "comment": " 名字部分 "
            },
            {
                "optional": true,
                "inline": "",
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>"
            },
            {
                "optional": true,
                "inline": "",
                "name": "extendsToken",
                "type": "number",
                "comment": "标记 'extends' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "extends",
                "type": "nodes.NodeList<ClassHeritageNode>"
            },
            {
                "optional": false,
                "inline": "",
                "name": "members",
                "type": "nodes.NodeList<TypeMemberSignature>"
            }
        ],
        "params": [
            {
                "name": "decorators",
                "type": "Decorators",
                "value": "",
                "optional": true
            },
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            }
        ],
        "name": "InterfaceDeclaration",
        "comment": "接口声明(`interface T {...}`)",
        "codes": [
            "if (decorators != undefined) {",
            "\t_.decorators = decorators;",
            "}",
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "this.parseDocComment(_);",
            "_.interfaceToken = readToken(tokens.TokenType.interface);",
            "_.name = Identifier(false);",
            "if (peek === '<') {",
            "\t_.typeParameters = TypeParameters();",
            "}",
            "this.parseExtendsClause(_);",
            "_.members = this.parseNodeList(TypeMemberSignature, '{', '}')"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "EnumDeclaration": {
        "indent": 0,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "decorators",
                "type": "Decorators"
            },
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "optional": false,
                "inline": "",
                "name": "enumToken",
                "type": "number",
                "comment": "标记 'enum' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "name",
                "type": "Identifier",
                "comment": " 名字部分 "
            },
            {
                "optional": true,
                "inline": "",
                "name": "extendsToken",
                "type": "number",
                "comment": "标记 'extends' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "extends",
                "type": "nodes.NodeList<ClassHeritageNode>"
            },
            {
                "optional": false,
                "inline": "",
                "name": "members",
                "type": "nodes.NodeList<EnumMemberDeclaration>"
            }
        ],
        "params": [
            {
                "name": "decorators",
                "type": "Decorators",
                "value": "",
                "optional": true
            },
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            }
        ],
        "name": "EnumDeclaration",
        "comment": "枚举声明(`enum T {}`)",
        "codes": [
            "if (decorators != undefined) {",
            "\t_.decorators = decorators;",
            "}",
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "this.parseDocComment(_);",
            "_.enumToken = readToken(tokens.TokenType.enum);",
            "_.name = Identifier(false);",
            "this.parseExtendsClause(_);",
            "_.members = this.parseDelimitedList(EnumMemberDeclaration, '{', '}', true, tokens.isPropertyNameStart);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "EnumMemberDeclaration": {
        "indent": 0,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "name",
                "type": "PropertyName",
                "comment": " 名字部分 "
            },
            {
                "optional": true,
                "inline": "",
                "name": "equalsToken",
                "type": "number",
                "comment": "标记 '=' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "initializer",
                "type": "Expression",
                "comment": " 初始值部分"
            }
        ],
        "params": [],
        "name": "EnumMemberDeclaration",
        "comment": "枚举成员声明(`x`、`x = 1`)",
        "codes": [
            "_.name = PropertyName();",
            "this.parseInitializer(_);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "NamespaceDeclaration": {
        "indent": 0,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "decorators",
                "type": "Decorators"
            },
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "optional": false,
                "inline": "",
                "name": "namespaceToken",
                "type": "number",
                "comment": "标记 'namespace' 的位置"
            }
        ],
        "params": [
            {
                "name": "decorators",
                "type": "Decorators",
                "value": "",
                "optional": true
            },
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            }
        ],
        "name": "NamespaceDeclaration",
        "comment": "命名空间声明(`namespace T {}`)",
        "codes": [
            "if (decorators != undefined) {",
            "\t_.decorators = decorators;",
            "}",
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "_.namespaceToken = readToken(tokens.TokenType.namespace);",
            "NamespaceOrModuleDeclaration(_, decorators, modifiers);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ModuleDeclaration": {
        "indent": 0,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "decorators",
                "type": "Decorators"
            },
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "optional": false,
                "inline": "",
                "name": "moduleToken",
                "type": "number",
                "comment": "标记 'module' 的位置"
            }
        ],
        "params": [
            {
                "name": "decorators",
                "type": "Decorators",
                "value": "",
                "optional": true
            },
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            }
        ],
        "name": "ModuleDeclaration",
        "comment": "模块声明(`module T {}`)",
        "codes": [
            "if (decorators != undefined) {",
            "\t_.decorators = decorators;",
            "}",
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "_.moduleToken = readToken(tokens.TokenType.module);",
            "NamespaceOrModuleDeclaration(_, decorators, modifiers);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "NamespaceOrModuleDeclaration": {
        "indent": 0,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "_",
                "comment": " 解析的目标节点 ",
                "type": "NamespaceDeclaration | ModuleDeclaration"
            },
            {
                "inline": "",
                "optional": true,
                "name": "decorators",
                "type": "Decorators"
            },
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "optional": true,
                "inline": "",
                "name": "name",
                "type": "Identifier",
                "comment": " 名字部分 "
            },
            {
                "optional": true,
                "inline": "",
                "name": "name",
                "type": "MemberCallExpression",
                "comment": " 名字部分 "
            },
            {
                "optional": false,
                "inline": "",
                "name": "statements",
                "type": "nodes.NodeList<Statement>"
            }
        ],
        "params": [
            {
                "name": "_",
                "type": "NamespaceDeclaration | ModuleDeclaration",
                "comment": " 解析的目标节点 ",
                "value": "",
                "optional": false
            },
            {
                "name": "decorators",
                "type": "Decorators",
                "value": "",
                "optional": true
            },
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            }
        ],
        "name": "NamespaceOrModuleDeclaration",
        "comment": "命名空间或模块声明",
        "codes": [
            "_._ = _;",
            "if (decorators != undefined) {",
            "\t_.decorators = decorators;",
            "}",
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "this.parseDocComment(_);",
            "if (lexer.current.type === 'module' && peek === 'stringLiteral') {",
            "\t(<ModuleDeclaration>_).name = StringLiteral;",
            "} else {",
            "\t_.name = Identifier();",
            "\twhile (peek === '.') {",
            "\t\t_.name = MemberCallExpression(_.name);",
            "\t}",
            "}",
            "this.parseBlockBody(_);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ExtensionDeclaration": {
        "indent": 0,
        "fields": [
            {
                "inline": "",
                "optional": true,
                "name": "decorators",
                "type": "Decorators"
            },
            {
                "inline": "",
                "optional": true,
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "optional": false,
                "inline": "",
                "name": "extendsToken",
                "type": "number",
                "comment": "标记 'extends' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "type",
                "type": "TypeNode",
                "comment": " 类型"
            },
            {
                "optional": true,
                "inline": "",
                "name": "extendsToken",
                "type": "number",
                "comment": "标记 'extends' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "extends",
                "type": "nodes.NodeList<ClassHeritageNode>"
            },
            {
                "optional": true,
                "inline": "",
                "name": "implementsToken",
                "type": "number",
                "comment": "标记 'implements' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "implements",
                "type": "nodes.NodeList<ClassHeritageNode>"
            },
            {
                "optional": true,
                "inline": "",
                "name": "members",
                "type": "nodes.NodeList<ClassElement>"
            }
        ],
        "params": [
            {
                "name": "decorators",
                "type": "Decorators",
                "value": "",
                "optional": true
            },
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": true
            }
        ],
        "name": "ExtensionDeclaration",
        "comment": "扩展声明(`extends T {}`)",
        "codes": [
            "if (decorators != undefined) {",
            "\t_.decorators = decorators;",
            "}",
            "if (modifiers != undefined) {",
            "\t_.modifiers = modifiers;",
            "}",
            "this.parseDocComment(_);",
            "_.extendsToken = readToken(tokens.TokenType.extends);",
            "_.type = TypeNode();",
            "this.parseExtendsClause(_);",
            "this.parseImplementsClause(_);",
            "this.parseClassBody(_);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ExtendsClause": {
        "indent": 0,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "extendsToken",
                "type": "number",
                "comment": "标记 'extends' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "extends",
                "type": "nodes.NodeList<ClassHeritageNode>"
            }
        ],
        "params": [
            {
                "name": "_",
                "type": "BreakStatement | ContinueStatement",
                "comment": " 解析的目标节点 ",
                "optional": false
            }
        ],
        "name": "ExtendsClause",
        "comment": "extends 分句(`extends xx`)",
        "codes": [
            "if (peek === 'extends') {",
            "\t_.extendsToken = readToken(tokens.TokenType.extends);",
            "\t_.extends = this.parseDelimitedList(ClassHeritageNode, , , false, tokens.isExpressionStart);",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ImplementsClause": {
        "indent": 0,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "implementsToken",
                "type": "number",
                "comment": "标记 'implements' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "implements",
                "type": "nodes.NodeList<ClassHeritageNode>"
            }
        ],
        "params": [
            {
                "name": "result",
                "optional": false
            }
        ],
        "name": "ImplementsClause",
        "comment": "implements 分句(`implements xx`)",
        "codes": [
            "if (peek === 'implements') {",
            "\t_.implementsToken = readToken(tokens.TokenType.implements);",
            "\t_.implements = this.parseDelimitedList(ClassHeritageNode, , , false, tokens.isExpressionStart);",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ClassHeritageNode": {
        "indent": 0,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "value",
                "type": "Expression",
                "comment": " 值部分"
            }
        ],
        "params": [],
        "name": "ClassHeritageNode",
        "comment": "extends 或 implements 分句项",
        "codes": [
            "_.value = Expression(tokens.Precedence.leftHandSide);"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "BlockBody": {
        "indent": 0,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "statements",
                "type": "nodes.NodeList<Statement>"
            }
        ],
        "params": [
            {
                "name": "_",
                "type": "BreakStatement | ContinueStatement",
                "comment": " 解析的目标节点 ",
                "optional": false
            }
        ],
        "name": "BlockBody",
        "comment": "语句块主体(`{...}`)",
        "codes": [
            "_.statements = this.parseNodeList(Statement, '{', '}')"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "TypeAliasDeclaration": {
        "indent": 0,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "typeToken",
                "type": "number",
                "comment": "标记 'type' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "name",
                "type": "Identifier",
                "comment": " 名字部分 "
            },
            {
                "optional": true,
                "inline": "",
                "name": "typeParameters",
                "type": "nodes.NodeList<TypeParameterDeclaration>"
            },
            {
                "optional": false,
                "inline": "",
                "name": "equalsToken",
                "type": "number",
                "comment": "标记 '=' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "value",
                "type": "TypeNode",
                "comment": " 值部分"
            }
        ],
        "params": [],
        "name": "TypeAliasDeclaration",
        "comment": "类型别名声明(`type A = number`)",
        "codes": [
            "_.typeToken = readToken(tokens.TokenType.type);",
            "_.name = Identifier();",
            "if (peek === '<') {",
            "\t_.typeParameters = TypeParameters();",
            "}",
            "_.equalsToken = readToken(tokens.TokenType.equals);",
            "_.value = TypeNode();",
            "Semicolon(';');"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ImportAssignmentOrImportDeclaration": {
        "indent": 0,
        "fields": [],
        "params": [],
        "name": "ImportAssignmentOrImportDeclaration",
        "comment": "import 赋值或 import 声明",
        "codes": [
            "const importToken = read;",
            "const imports = list(ImportClause, false, undefined, undefined, ',', tokens.isBindingNameStart);",
            "if (peek === '=' && imports.length === 1 && imports[0].constructor === SimpleImportOrExportClause && (<SimpleImportOrExportClause>imports[0]).name == null) {",
            "\treturn ImportAssignmentDeclaration(importToken, (<SimpleImportOrExportClause>imports[0]).variable);",
            "}",
            "return ImportDeclaration(importToken, imports);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ImportAssignmentDeclaration": {
        "indent": 0,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "importToken",
                "comment": "标记 'import' 的位置",
                "type": "number"
            },
            {
                "inline": "",
                "optional": false,
                "name": "variable",
                "comment": "别名",
                "type": "Identifier"
            },
            {
                "optional": false,
                "inline": "",
                "name": "equalsToken",
                "type": "number",
                "comment": "标记 '=' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "value",
                "type": "Expression",
                "comment": " 值部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            }
        ],
        "params": [
            {
                "name": "importToken",
                "type": "number",
                "comment": "标记 'import' 的位置",
                "value": "",
                "optional": false
            },
            {
                "name": "variable",
                "type": "Identifier",
                "comment": "别名",
                "value": "",
                "optional": false
            }
        ],
        "name": "ImportAssignmentDeclaration",
        "comment": "import 赋值声明",
        "codes": [
            "_.importToken = importToken;",
            "_.variable = variable;",
            "_.equalsToken = readToken(tokens.TokenType.equals);",
            "_.value = Expression(tokens.Precedence.assignment);",
            "this.parseSemicolon(_);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ImportDeclaration": {
        "indent": 0,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "importToken",
                "comment": "标记 'import' 的位置",
                "type": "number"
            },
            {
                "inline": "",
                "optional": false,
                "name": "variables",
                "comment": "别名",
                "type": "nodes.NodeList<Identifier>"
            },
            {
                "optional": true,
                "inline": "",
                "name": "fromToken",
                "type": "number",
                "comment": "标记 'from' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "from",
                "type": "StringLiteral",
                "comment": " 导入模块名"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            }
        ],
        "params": [
            {
                "name": "importToken",
                "type": "number",
                "comment": "标记 'import' 的位置",
                "value": "",
                "optional": false
            },
            {
                "name": "variables",
                "type": "nodes.NodeList<Identifier>",
                "comment": "别名",
                "value": "",
                "optional": false
            }
        ],
        "name": "ImportDeclaration",
        "comment": "",
        "codes": [
            "_.importToken = importToken;",
            "_.variables = variables;",
            "; // import 声明(`import x from '...'`)",
            "if (variables) {",
            "\t_.fromToken = readToken(tokens.TokenType.from);",
            "}",
            "_.from = StringLiteral();",
            "this.parseSemicolon(_);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ImportClause": {
        "indent": 0,
        "fields": [],
        "params": [],
        "name": "ImportClause",
        "comment": "import 分句(`x`、`{x}`、...)",
        "codes": [
            "switch (peek) {",
            "\tcase '*':",
            "\t\treturn NamespaceImportClause;",
            "\tcase '{':",
            "\t\treturn NamedImportClause;",
            "\tdefault:",
            "\t\treturn SimpleImportOrExportClause(true);",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": "SimpleImportOrExportClause, NamespaceImportClause, NamedImportClause"
    },
    "NamespaceImportClause": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "asteriskToken",
                "type": "number",
                "comment": "标记 '*' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "asToken",
                "type": "number",
                "comment": "标记 'as' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "variable",
                "type": "Identifier",
                "comment": "别名"
            }
        ],
        "params": [],
        "name": "NamespaceImportClause",
        "comment": "命名空间导入分句(`* as x`)",
        "codes": [
            "_.asteriskToken = readToken(tokens.TokenType.asterisk);",
            "_.asToken = readToken(tokens.TokenType.as);",
            "_.variable = Identifier();"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "NamedImportClause": {
        "indent": 3,
        "fields": [
            {
                "optional": false,
                "inline": "",
                "name": "elements",
                "type": "nodes.NodeList<undefined>",
                "comment": " 元素列表"
            }
        ],
        "params": [],
        "name": "NamedImportClause",
        "comment": "对象导入分句(`{x, x as y}`)",
        "codes": [
            "_.elements = this.parseNodeList((, , )"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "SimpleImportOrExportClause": {
        "indent": 0,
        "fields": [
            {
                "optional": true,
                "inline": "",
                "name": "asToken",
                "type": "number",
                "comment": "标记 'as' 的位置"
            },
            {
                "optional": true,
                "inline": "",
                "name": "variable",
                "type": "Identifier",
                "comment": " 导入或导出的变量"
            }
        ],
        "params": [
            {
                "name": "importClause",
                "type": "boolean/* 解析 import 分句*/",
                "optional": false
            }
        ],
        "name": "SimpleImportOrExportClause",
        "comment": "简单导入或导出分句(`x`、`x as y`)",
        "codes": [
            "const nameOrVariable = Identifier(true);",
            "if (peek === 'as') {",
            "\t_.asToken = readToken(tokens.TokenType.as);",
            "\t_.variable = Identifier(!importClause);",
            "} else {",
            "\tif (importClause && !tokens.isIdentifierName, tokens.isTypeNodeStart(current)) {",
            "\t\terror(lexer.current, \"Identifier expected; Keyword '{0}' cannot be used as an identifier.\", tokens.getTokenName(current));",
            "\t}",
            "}"
        ],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ExportAssignmentOrExportDeclaration": {
        "indent": 0,
        "fields": [],
        "params": [],
        "name": "ExportAssignmentOrExportDeclaration",
        "comment": "export 赋值或 export 声明",
        "codes": [
            "const savedState = lexer.current;",
            "const exportToekn = read;",
            "switch (peek) {",
            "\tcase 'function':",
            "\t\tlexer.current = savedState;",
            "\t\treturn FunctionDeclaration(undefined, Modifiers);",
            "\tcase 'class':",
            "\t\tlexer.current = savedState;",
            "\t\treturn ClassDeclaration(undefined, Modifiers);",
            "\tcase 'interface':",
            "\t\tlexer.current = savedState;",
            "\t\treturn InterfaceDeclaration(undefined, Modifiers);",
            "\tcase 'enum':",
            "\t\tlexer.current = savedState;",
            "\t\treturn EnumDeclaration(undefined, Modifiers);",
            "\tcase 'namespace':",
            "\t\tlexer.current = savedState;",
            "\t\treturn NamespaceDeclaration(undefined, Modifiers);",
            "\tcase 'module':",
            "\t\tlexer.current = savedState;",
            "\t\treturn ModuleDeclaration(undefined, Modifiers);",
            "\tcase 'var':",
            "\tcase 'let':",
            "\tcase 'const':",
            "\t\tlexer.current = savedState;",
            "\t\treturn VariableStatement(Modifiers);",
            "\tcase '*':",
            "\t\treturn this.parseExportNamespaceDeclaration(exportToken);",
            "\tcase '{':",
            "\t\treturn this.parseExportListDeclaration(exportToken);",
            "\tcase '=':",
            "\t\treturn this.parseExportAssignmentDeclaration(exportToken);",
            "\tdefault:",
            "\t\treturn ExportDefaultDeclaration(Modifiers());",
            "}"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ExportNamespaceDeclaration": {
        "indent": 3,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "exportToken",
                "comment": "标记 'export' 的位置",
                "type": "number"
            },
            {
                "optional": false,
                "inline": "",
                "name": "asteriskToken",
                "type": "number",
                "comment": "标记 '*' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "fromToken",
                "type": "number",
                "comment": "标记 'from' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "from",
                "type": "StringLiteral",
                "comment": " 导入模块名"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            }
        ],
        "params": [
            {
                "name": "exportToken",
                "type": "number",
                "comment": "标记 'export' 的位置",
                "value": "",
                "optional": false
            }
        ],
        "name": "ExportNamespaceDeclaration",
        "comment": "导出列表声明(`export * from ...`)",
        "codes": [
            "_.exportToken = exportToken;",
            "_.asteriskToken = readToken(tokens.TokenType.asterisk);",
            "_.fromToken = readToken(tokens.TokenType.from);",
            "_.from = StringLiteral();",
            "this.parseSemicolon(_);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ExportListDeclaration": {
        "indent": 3,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "exportToken",
                "comment": "标记 'export' 的位置",
                "type": "number"
            },
            {
                "optional": false,
                "inline": "",
                "name": "variables",
                "type": "nodes.NodeList<SimpleImportOrExportClause>",
                "comment": "别名"
            },
            {
                "optional": false,
                "inline": "",
                "name": "fromToken",
                "type": "number",
                "comment": "标记 'from' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "from",
                "type": "StringLiteral",
                "comment": " 导入模块名"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            }
        ],
        "params": [
            {
                "name": "exportToken",
                "type": "number",
                "comment": "标记 'export' 的位置",
                "value": "",
                "optional": false
            }
        ],
        "name": "ExportListDeclaration",
        "comment": "导出列表声明(`export a from ...`)",
        "codes": [
            "_.exportToken = exportToken;",
            "_.variables = this.parseDelimitedList(SimpleImportOrExportClause, '{', '}', true, tokens.isKeyword);",
            "_.fromToken = readToken(tokens.TokenType.from);",
            "_.from = StringLiteral();",
            "this.parseSemicolon(_);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ExportAssignmentDeclaration": {
        "indent": 3,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "exportToken",
                "comment": "标记 'export' 的位置",
                "type": "number"
            },
            {
                "optional": false,
                "inline": "",
                "name": "equalsToken",
                "type": "number",
                "comment": "标记 '=' 的位置"
            },
            {
                "optional": false,
                "inline": "",
                "name": "value",
                "type": "Expression",
                "comment": " 值部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            }
        ],
        "params": [
            {
                "name": "exportToken",
                "type": "number",
                "comment": "标记 'export' 的位置",
                "value": "",
                "optional": false
            }
        ],
        "name": "ExportAssignmentDeclaration",
        "comment": "导出赋值声明(`export = 1`)",
        "codes": [
            "_.exportToken = exportToken;",
            "_.equalsToken = readToken(tokens.TokenType.equals);",
            "_.value = Expression(tokens.Precedence.assignment);",
            "this.parseSemicolon(_);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "ExportDefaultDeclaration": {
        "indent": 3,
        "fields": [
            {
                "inline": "",
                "optional": false,
                "name": "modifiers",
                "type": "Modifiers"
            },
            {
                "optional": false,
                "inline": "",
                "name": "expression",
                "type": "Expression",
                "comment": "表达式部分"
            },
            {
                "optional": true,
                "inline": "",
                "name": "semicolonToken",
                "type": "number",
                "comment": "标记 ';' 的位置"
            }
        ],
        "params": [
            {
                "name": "modifiers",
                "type": "Modifiers",
                "value": "",
                "optional": false
            }
        ],
        "name": "ExportDefaultDeclaration",
        "comment": "export default 声明(`export default x = 1`)",
        "codes": [
            "_.modifiers = modifiers;",
            "_.expression = Expression(tokens.Precedence.assignment);",
            "this.parseSemicolon(_);"
        ],
        "extend": "Declaration",
        "abstract": false,
        "list": null,
        "alias": ""
    },
    "DocComment": {
        "indent": 0,
        "fields": [],
        "params": [
            {
                "name": "_",
                "type": "BreakStatement | ContinueStatement",
                "comment": " 解析的目标节点 ",
                "optional": false
            }
        ],
        "name": "DocComment",
        "comment": "文档注释",
        "codes": [],
        "extend": "Node",
        "abstract": false,
        "list": null,
        "alias": ""
    }
}