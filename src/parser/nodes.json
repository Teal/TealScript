[
    {
        "name": "Node",
        "modifiers": "abstract",
        "summary": "表示一个语法树节点。",
        "members": [
            {
                "name": "start",
                "type": "number",
                "summary": "获取当前节点的开始位置。如果当前节点是生成的则返回 undefined。"
            },
            {
                "name": "end",
                "type": "number",
                "summary": "获取当前节点的结束位置。如果当前节点是生成的则返回 undefined。"
            }
        ]
    },
    {
        "name": "SourceFile",
        "extends": "Node",
        "summary": "表示一个源文件。",
        "members": [
            {
                "name": "path",
                "type": "string",
                "summary": "获取或设置当前源文件的路径。如果当前文件不是从硬盘载入则返回 undefined。"
            },
            {
                "name": "content",
                "type": "string",
                "summary": "获取或设置当前源文件的内容。"
            },
            {
                "name": "statements",
                "type": "Statement[]",
                "summary": "获取当前源文件的所有语句。"
            }
        ]
    },
    {
        "name": "NodeList<T extends Node>",
        "extends": "Array<T>",
        "summary": "表示一个逗号隔开的节点列表(<..., ...>。",
        "members": [
            {
                "name": "openStart",
                "type": "number",
                "summary": "获取当前节点开始标记的开始位置。"
            },
            {
                "name": "openEnd",
                "type": "number",
                "summary": "获取当前节点开始标记的结束位置。"
            },
            {
                "name": "seperatorStarts",
                "type": "number[]",
                "summary": "获取当前节点的分割标记的所有开始位置。"
            },
            {
                "name": "seperatorEnds",
                "type": "number[]",
                "summary": "获取当前节点的分割标记的所有结束位置。",
                "body": "return this.seperatorStarts.map(p => p + 1);"
            },
            {
                "name": "closeStart",
                "type": "number",
                "summary": "获取当前节点开始标记的开始位置。"
            },
            {
                "name": "closeEnd",
                "BindingPattern": null,
                "type": "number",
                "summary": "获取当前节点开始标记的结束位置。"
            },
            {
                "name": "hasTrailingComma",
                "type": "boolean",
                "summary": "判断当前列表是否包含尾随的数组。",
                "body": "return this.seperatorStarts.length === this.length;"
            }
        ]
    },
    {
        "name": "Statement",
        "modifiers": "abstract",
        "extends": "Node",
        "summary": "表示一个语句。",
        "members": [
            {
                "name": "hasSemicolon",
                "type": "boolean",
                "summary": "判断当前语句是否以分号结尾。",
                "body": "return false;"
            }
        ]
    },
    {
        "name": "EmptyStatement",
        "extends": "Statement",
        "summary": "表示一个空语句(;)。",
        "members": [
            {
                "name": "end",
                "body": "return this.start + 1;"
            },
            {
                "name": "hasSemicolon",
                "body": "return true;"
            }
        ]
    },
    {
        "name": "Block",
        "extends": "Statement",
        "summary": "表示一个语句块({...})。",
        "members": [
            {
                "name": "statements",
                "type": "Statement[]",
                "summary": "获取当前语句块内的所有语句。"
            }
        ]
    },
    {
        "name": "VariableStatement",
        "extends": "Statement",
        "summary": "表示一个变量声明语句(var xx = ...)。",
        "members": [
            {
                "name": "type",
                "type": "VariableType",
                "summary": "获取当前变量声明语句的格式。"
            },
            {
                "name": "variables",
                "type": "VariableDeclaration[]",
                "summary": "获取当前变量声明语句的所有变量。"
            },
            {
                "name": "hasSemicolon",
                "body": "return this.end > this.variables[this.variables.length - 1].end;"
            }
        ]
    },
    {
        "name": "VariableType",
        "type": "enum",
        "summary": "表示变量的声明格式。",
        "members": [
            {
                "name": "none",
                "summary": "变量未声明。"
            },
            {
                "name": "var",
                "summary": "使用 var 声明。"
            },
            {
                "name": "const",
                "summary": "使用 const 声明。"
            },
            {
                "name": "let",
                "summary": "使用 let 声明。"
            }
        ]
    },
    {
        "name": "VariableDeclaration",
        "extends": "Node",
        "summary": "表示一个变量声明(xx = ...)。",
        "members": [
            {
                "name": "name",
                "type": "Identifier | BindingPattern",
                "summary": "获取当前变量的名字。"
            },
            {
                "name": "colonStart",
                "type": "number",
                "summary": "获取当前变量名后冒号的开始位置。如果当前变量后不跟冒号则返回 undefined。"
            },
            {
                "name": "colonEnd",
                "type": "number",
                "summary": "获取当前变量名后冒号的结束位置。如果当前变量后不跟冒号则返回 undefined。",
                "body": "return this.colonEnd != undefined ? this.colonEnd + 1 : undefined;"
            },
            {
                "name": "type",
                "type": "Expression",
                "summary": "获取当前变量定义的类型。"
            },
            {
                "name": "equalStart",
                "type": "number",
                "summary": "获取当前变量名后等号的开始位置。如果当前变量后不跟等号则返回 undefined。"
            },
            {
                "name": "equalEnd",
                "type": "number",
                "summary": "获取当前变量名后等号的结束位置。如果当前变量后不跟等号则返回 undefined。",
                "body": "return this.equalStart != undefined ? this.equalStart + 1 : undefined;"
            },
            {
                "name": "initializer",
                "type": "Expression",
                "summary": "获取当前变量的初始值。"
            }
        ]
    },
    {
        "name": "BindingPattern",
        "modifiers": "abstract",
        "extends": "Node",
        "summary": "表示一个绑定模式([xx, ...])",
        "members": [
            {
                "name": "elements",
                "type": "NodeList<BindingElement>",
                "summary": "获取当前绑定模式的元素列表。"
            }
        ]
    },
    {
        "name": "BindingElement",
        "modifiers": "abstract",
        "extends": "Node",
        "summary": "表示一个绑定模式项(xx, ..)",
        "members": [
            {
                "name": "name",
                "type": "Identifier | BindingPattern",
                "summary": "获取当前绑定模式项的名字。"
            }
        ]
    },
    {
        "name": "ArrayBindingPattern",
        "extends": "BindingPattern",
        "summary": "表示一个数组绑定模式([xx, ...])",
        "members": [
            {
                "name": "elements",
                "type": "NodeList<ArrayBindingElement>"
            }
        ]
    },
    {
        "name": "ArrayBindingElement",
        "extends": "BindingElement",
        "summary": "表示一个数组绑定模式项(xx, ..)",
        "members": [
            {
                "name": "dotDotDotStart",
                "type": "number",
                "summary": "获取当前绑定模式项的点点点开始位置。如果当前绑定模式项不含点点点则返回 undefined。"
            },
            {
                "name": "dotDotDotEnd",
                "type": "number",
                "summary": "获取当前绑定模式项的点点点结束位置。如果当前绑定模式项不含点点点则返回 undefined。",
                "body": "return this.dotDotDotStart != undefined ? this.dotDotDotStart + 3 : undefined;"
            },
            {
                "name": "equalStart",
                "type": "number",
                "summary": "获取当前绑定模式项的等号开始位置。如果当前绑定模式项不含等号则返回 undefined。"
            },
            {
                "name": "equalEnd",
                "type": "number",
                "summary": "获取当前绑定模式项的等号结束位置。如果当前绑定模式项不含等号则返回 undefined。",
                "body": "return this.equalEnd != undefined ? this.equalStart + 1 : undefined;"
            },
            {
                "name": "initializer",
                "type": "Expression",
                "summary": "获取当前绑定模式项的初始值。"
            }
        ]
    },
    {
        "name": "ObjectBindingPattern",
        "extends": "BindingPattern",
        "summary": "表示一个对象绑定模式({xx, ...})",
        "members": [
            {
                "name": "elements",
                "type": "NodeList<ObjectBindingElement>"
            }
        ]
    },
    {
        "name": "ObjectBindingElement",
        "extends": "BindingElement",
        "summary": "表示一个对象绑定模式项(xx: y)",
        "members": [
            {
                "name": "propertyName",
                "type": "Expression",
                "summary": "获取对象绑定模式项的属性名。"
            },
            {
                "name": "colonStart",
                "type": "number",
                "summary": "获取当前属性名后冒号的开始位置。如果当前属性后不跟冒号则返回 undefined。"
            },
            {
                "name": "colonEnd",
                "type": "number",
                "summary": "获取当前属性名后冒号的结束位置。如果当前属性后不跟冒号则返回 undefined。",
                "body": "return this.colonEnd != undefined ? this.colonEnd + 1 : undefined;"
            }
        ]
    },
    {
        "name": "LabeledStatement",
        "extends": "Statement",
        "summary": "表示一个标签语句(xx: ...)。",
        "members": [
            {
                "name": "label",
                "type": "Identifier",
                "summary": "获取当前标签语句的标签部分。"
            },
            {
                "name": "body",
                "type": "Statement",
                "summary": "获取当前标签语句的主体部分。"
            }
        ]
    },
    {
        "name": "ExpressionStatement",
        "extends": "Statement",
        "summary": "表示一个表达式语句(...;)。",
        "members": [
            {
                "name": "body",
                "type": "Expression",
                "summary": "获取当前表达式语句的主体部分。"
            },
            {
                "name": "hasSemicolon",
                "body": "return this.end > this.body.end;"
            }
        ]
    },
    {
        "name": "IfStatement",
        "extends": "Statement",
        "summary": "表示一个 if 语句(if(...) {...})。",
        "members": [
            {
                "name": "condition",
                "type": "Expression",
                "summary": "获取当前 if 语句的条件部分。"
            },
            {
                "name": "then",
                "type": "Statement",
                "summary": "获取当前 if 语句的则部分。"
            },
            {
                "name": "else",
                "type": "Statement",
                "summary": "获取当前 if 语句的否则部分。如果当前 if 语句不含否则部分则返回 undefined。"
            },
            {
                "name": "end",
                "body": "return (this.else || this.then).end;"
            }
        ]
    },
    {
        "name": "SwitchStatement",
        "extends": "Statement",
        "summary": "表示一个 switch 语句(switch(...){...})。",
        "members": [
            {
                "name": "condition",
                "type": "Expression",
                "summary": "获取当前 switch 语句的条件部分。"
            },
            {
                "name": "cases",
                "type": "CaseClause[]",
                "summary": "获取当前 switch 语句的所有分支。"
            }
        ]
    },
    {
        "name": "CaseClause",
        "extends": "Node",
        "summary": "表示一个 switch 语句的 case 分支(case ...:{...})。",
        "members": [
            {
                "name": "label",
                "type": "Expression",
                "summary": "获取当前分支的标签部分。如果当前分支是 default 分支则返回 undefined。"
            },
            {
                "name": "colonStart",
                "type": "number",
                "summary": "获取当前标签名后冒号的开始位置。"
            },
            {
                "name": "colonEnd",
                "type": "number",
                "summary": "获取当前标签名后冒号的结束位置。",
                "body": "return this.colonEnd + 1;"
            },
            {
                "name": "statements",
                "type": "Statement[]",
                "summary": "获取当前分支的所有语句。"
            }
        ]
    },
    {
        "name": "ForStatement",
        "extends": "Statement",
        "summary": "表示一个 for 语句(for(...; ...; ...) {...})。",
        "members": [
            {
                "name": "initializer",
                "type": "VariableStatement | Expression",
                "summary": "获取当前 for 语句的初始化部分。如果当前 for 语句不存在初始化语句则返回 undefined。"
            },
            {
                "name": "firstSemicolonStart",
                "type": "number",
                "summary": "获取条件部分中首个分号的开始位置。"
            },
            {
                "name": "firstSemicolonEnd",
                "type": "number",
                "summary": "获取条件部分中首个分号的结束位置。",
                "body": "return this.firstSemicolonStart + 1;"
            },
            {
                "name": "condition",
                "type": "Expression",
                "summary": "获取当前 for 语句的条件部分。如果当前 for 语句不存在条件部分则返回 undefined。"
            },
            {
                "name": "secondSemicolonStart",
                "type": "number",
                "summary": "获取条件部分中第二个分号的开始位置。"
            },
            {
                "name": "secondSemicolonEnd",
                "type": "number",
                "summary": "获取条件部分中第二个分号的结束位置。",
                "body": "return this.secondSemicolonStart + 1;"
            },
            {
                "name": "iterator",
                "type": "Expression",
                "summary": "获取当前 for 语句的迭代器部分。如果当前 for 语句不存在迭代器部分则返回 undefined。"
            },
            {
                "name": "body",
                "type": "Statement",
                "summary": "获取当前 for 语句的主体部分。"
            }
        ]
    },
    {
        "name": "ForInStatement",
        "extends": "Statement",
        "summary": "表示一个 for..in 语句(for(var xx in ...) {...})。",
        "members": [
            {
                "name": "variableType",
                "type": "VariableType",
                "summary": "获取当前 for..in 语句的变量声明格式。如果未声明变量则返回 undefined。"
            },
            {
                "name": "variable",
                "type": "Identifier | BindingPattern",
                "summary": "获取当前 for..in 语句的变量名。"
            },
            {
                "name": "iterator",
                "type": "Expression",
                "summary": "获取当前 for..in 语句的迭代部分。"
            },
            {
                "name": "body",
                "type": "Statement",
                "summary": "获取当前 for..in 语句的主体部分。"
            }
        ]
    },
    {
        "name": "ForOfStatement",
        "extends": "Statement",
        "summary": "表示一个 for..of 语句(for(var xx of ...) {...})。",
        "members": [
            {
                "name": "variableType",
                "type": "VariableType",
                "summary": "获取当前 for..of 语句的变量声明格式。如果未声明变量则返回 undefined。"
            },
            {
                "name": "variable",
                "type": "Identifier | BindingPattern",
                "summary": "获取当前 for..of 语句的变量部分。"
            },
            {
                "name": "iterator",
                "type": "Expression",
                "summary": "获取当前 for..of 语句的迭代部分。"
            },
            {
                "name": "body",
                "type": "Statement",
                "summary": "获取当前 for..of 语句的主体部分。"
            }
        ]
    },
    {
        "name": "WhileStatement",
        "extends": "Statement",
        "summary": "表示一个 while 语句(while(...) {...})。",
        "members": [
            {
                "name": "condition",
                "type": "Expression",
                "summary": "获取当前 while 语句的条件部分。"
            },
            {
                "name": "body",
                "type": "Statement",
                "summary": "获取当前 while 语句的主体部分。"
            },
            {
                "name": "end",
                "body": "return this.body.end;"
            }
        ]
    },
    {
        "name": "DoWhileStatement",
        "extends": "Statement",
        "summary": "表示一个 do..while 语句(do {...} while(...);)。",
        "members": [
            {
                "name": "condition",
                "type": "Expression",
                "summary": "获取当前 do..while 语句的条件部分。"
            },
            {
                "name": "body",
                "type": "Statement",
                "summary": "获取当前 do..while 语句的主体部分。"
            },
            {
                "name": "hasSemicolon",
                "body": "return this.end > this.condition.end;"
            }
        ]
    },
    {
        "name": "ContinueStatement",
        "extends": "Statement",
        "summary": "表示一个 continue 语句(continue;)。",
        "members": [
            {
                "name": "label",
                "type": "Identifier",
                "summary": "获取当前 continue 语句的标签部分。如果不存在标签则返回 undefined。"
            },
            {
                "name": "hasSemicolon",
                "body": "return this.end > this.start + 8/*'continue'.length*/;"
            }
        ]
    },
    {
        "name": "BreakStatement",
        "extends": "Statement",
        "summary": "表示一个 break 语句(break;)。",
        "members": [
            {
                "name": "label",
                "type": "Identifier",
                "summary": "获取当前 break 语句的标签部分。如果不存在标签部分则返回 undefined。"
            },
            {
                "name": "hasSemicolon",
                "body": "return this.end > this.start + 5/*'break'.length*/;"
            }
        ]
    },
    {
        "name": "ReturnStatement",
        "extends": "Statement",
        "summary": "表示一个 return 语句(return ...;)。",
        "members": [
            {
                "name": "value",
                "type": "Expression",
                "summary": "获取当前 return 语句的返回值部分。如果不存在返回值部分则返回 undefined。"
            },
            {
                "name": "hasSemicolon",
                "body": "return this.end > (this.value ? this.value.end : this.start + 6/*'return'.length*/);"
            }
        ]
    },
    {
        "name": "ThrowStatement",
        "extends": "Statement",
        "summary": "表示一个 throw 语句(throw ...;)。",
        "members": [
            {
                "name": "value",
                "type": "Expression",
                "summary": "获取当前 throw 语句的参数部分。"
            },
            {
                "name": "hasSemicolon",
                "body": "return this.end > (this.value ? this.value.end : this.start + 6/*'return'.length*/);"
            }
        ]
    },
    {
        "name": "TryStatement",
        "extends": "Statement",
        "summary": "表示一个 try 语句(try {...} catch(e) {...})。",
        "members": [
            {
                "name": "try",
                "type": "Statement",
                "summary": "获取当前 try 语句的 try 部分。"
            },
            {
                "name": "catch",
                "type": "CatchClause",
                "summary": "获取当前 try 语句的 catch 部分。"
            },
            {
                "name": "finally",
                "type": "FinallyClause",
                "summary": "获取当前 try 语句的 finally 部分。"
            }
        ]
    },
    {
        "name": "CatchClause",
        "extends": "Node",
        "summary": "表示一个 try 语句的 catch 部分(catch(e) {...})。",
        "members": [
            {
                "name": "openParanStart",
                "type": "number",
                "summary": "获取异常变量的开括号的开始位置。"
            },
            {
                "name": "openParanEnd",
                "type": "number",
                "summary": "获取异常变量的开括号的结束位置。",
                "body": "return this.openParanStart + 1;"
            },
            {
                "name": "variable",
                "type": "Identifier",
                "summary": "获取当前 catch 部分的变量名"
            },
            {
                "name": "closeParanStart",
                "type": "number",
                "summary": "获取异常变量的闭括号的开始位置。"
            },
            {
                "name": "closeParanEnd",
                "type": "number",
                "summary": "获取异常变量的闭括号的结束位置。",
                "body": "return this.closeParanStart + 1;"
            },
            {
                "name": "body",
                "type": "Statement",
                "summary": "获取当前 catch 部分的主体部分。"
            }
        ]
    },
    {
        "name": "FinallyClause",
        "extends": "Node",
        "summary": "表示一个 try 语句的 finally 部分(finally {...})。",
        "members": [
            {
                "name": "body",
                "type": "Statement",
                "summary": "获取当前 finally 部分的主体部分。"
            }
        ]
    },
    {
        "name": "WithStatement",
        "extends": "Statement",
        "summary": "表示一个 with 语句(with(...) {...})。",
        "members": [
            {
                "name": "value",
                "type": "Expression",
                "summary": "获取当前的 with 语句的值部分。"
            },
            {
                "name": "body",
                "type": "Statement",
                "summary": "获取当前的 with 语句的主体部分。"
            }
        ]
    },
    {
        "name": "Expression",
        "modifiers": "abstract",
        "extends": "Node",
        "summary": "表示一个表达式。"
    },
    {
        "name": "Identifier",
        "extends": "Expression",
        "summary": "表示一个标识符(xx)。",
        "members": [
            {
                "name": "value",
                "type": "string",
                "summary": "获取或设置当前标识符的内容。"
            }
        ]
    },
    {
        "name": "NullLiteral",
        "extends": "Expression",
        "summary": "表示 null 字面量(null)。"
    },
    {
        "name": "TrueLiteral",
        "extends": "Expression",
        "summary": "表示 true 字面量(true)。"
    },
    {
        "name": "FalseLiteral",
        "extends": "Expression",
        "summary": "表示 false 字面量(false)。"
    },
    {
        "name": "NumericLiteral",
        "extends": "Expression",
        "summary": "表示一个浮点数字面量(1)。",
        "members": [
            {
                "name": "value",
                "type": "number",
                "summary": "获取或设置当前浮点数的值。"
            }
        ]
    },
    {
        "name": "StringLiteral",
        "extends": "Expression",
        "summary": "表示一个字符串字面量('...')。",
        "members": [
            {
                "name": "value",
                "type": "string",
                "summary": "获取或设置当前字符串的内容。"
            }
        ]
    },
    {
        "name": "ArrayLiteral",
        "extends": "Expression",
        "summary": "表示一个数组字面量([...])。",
        "members": [
            {
                "name": "elements",
                "type": "NodeList<Expression>",
                "summary": "获取当前数组字面量的所有项。"
            }
        ]
    },
    {
        "name": "ObjectLiteral",
        "extends": "Expression",
        "summary": "表示一个对象字面量({x: ...})。",
        "members": [
            {
                "name": "elements",
                "type": "NodeList<ObjectLiteralElement>",
                "summary": "获取当前对象字面量的所有项。"
            }
        ]
    },
    {
        "name": "ObjectLiteralElement",
        "extends": "Node",
        "summary": "表示一个对象字面量项。",
        "members": [
            {
                "name": "name",
                "type": "Identifier",
                "summary": "获取当前对象字面量项的键部分。"
            },
            {
                "name": "colonStart",
                "type": "number",
                "summary": "获取当前变量名后冒号的开始位置。如果当前变量后不跟冒号则返回 undefined。"
            },
            {
                "name": "colonEnd",
                "type": "number",
                "summary": "获取当前变量名后冒号的结束位置。如果当前变量后不跟冒号则返回 undefined。",
                "body": "return this.colonEnd != undefined ? this.colonEnd + 1 : undefined;"
            },
            {
                "name": "value",
                "type": "Expression",
                "summary": "获取当前对象字面量项的值部分。"
            }
        ]
    },
    {
        "name": "ThisLiteral",
        "extends": "Expression",
        "summary": "表示 this 字面量(this)。"
    },
    {
        "name": "SuperLiteral",
        "extends": "Expression",
        "summary": "表示 super 字面量(super)。"
    },
    {
        "name": "ParenthesizedExpression",
        "extends": "Expression",
        "summary": "表示一个括号表达式((...))。",
        "members": [
            {
                "name": "body",
                "type": "Expression",
                "summary": "获取当前括号表达式的主体部分。"
            }
        ]
    },
    {
        "name": "ConditionalExpression",
        "extends": "Expression",
        "summary": "表示一个条件表达式(... ? ... : ...)。",
        "members": [
            {
                "name": "condition",
                "type": "Expression",
                "summary": "获取当前条件表达式的条件部分。"
            },
            {
                "name": "then",
                "type": "Expression",
                "summary": "获取当前条件表达式的则部分。"
            },
            {
                "name": "else",
                "type": "Expression",
                "summary": "获取当前条件表达式的否则部分。"
            }
        ]
    },
    {
        "name": "LambdaLiteral",
        "extends": "Expression",
        "summary": "表示一个箭头函数(x => ...)。",
        "members": [
            {
                "name": "typeParameters",
                "type": "NodeList<GenericParameterDeclaration>",
                "summary": "获取当前箭头函数的所有泛型参数。"
            },
            {
                "name": "parameters",
                "type": "NodeList<ParameterDeclaration>",
                "summary": "获取当前箭头函数的所有参数。"
            },
            {
                "name": "arrowStart",
                "type": "number",
                "summary": "获取当前表达式的箭头开始位置。"
            },
            {
                "name": "arrowEnd",
                "summary": "获取当前表达式的箭头结束位置。",
                "body": "return this.arrowStart + 1;"
            },
            {
                "name": "body",
                "type": "Block | Expression",
                "summary": "获取当前箭头函数的主体部分。"
            }
        ]
    },
    {
        "name": "YieldExpression",
        "extends": "Statement",
        "summary": "表示一个 yield 表达式(yield xx)。",
        "members": [
            {
                "name": "asteriskStart",
                "type": "number",
                "summary": "获取当前表达式的 * 的开始位置。如果当前表达式无 * 则返回 undefined。"
            },
            {
                "name": "asteriskEnd",
                "summary": "获取当前表达式的 * 的结束位置。如果当前表达式无 * 则返回 undefined。",
                "body": "return this.asteriskStart != undefined ? this.asteriskStart + 1 : undefined;"
            },
            {
                "name": "body",
                "type": "Expression",
                "summary": "获取 yield 表达式的主体部分。"
            },
            {
                "name": "end",
                "summary": "获取当前节点的结束位置。如果当前节点是生成的则返回 undefined。",
                "body": "return this.body ? this.body.end : this.start + 5/*'yield'.length*/;"
            }
        ]
    },
    {
        "name": "CastExpression",
        "extends": "Expression",
        "summary": "表示一个类型转换表达式(<T>xx)。",
        "members": [
            {
                "name": "lessThanStart",
                "type": "number",
                "summary": "获取当前表达式的 < 的开始位置。"
            },
            {
                "name": "lessThanEnd",
                "summary": "获取当前表达式的 < 的结束位置。",
                "body": "return this.lessThanStart + 1;"
            },
            {
                "name": "type",
                "type": "Expression",
                "summary": "获取当前类型转换表达式的类型部分。"
            },
            {
                "name": "greaterThanStart",
                "type": "number",
                "summary": "获取当前表达式的 > 的开始位置。"
            },
            {
                "name": "greaterThanEnd",
                "summary": "获取当前表达式的 > 的结束位置。",
                "body": "return this.greaterThanStart + 1;"
            },
            {
                "name": "body",
                "type": "Expression",
                "summary": "获取当前类型转换表达式的主体部分。"
            }
        ]
    },
    {
        "name": "MemberCallExpression",
        "extends": "Expression",
        "summary": "表示一个成员调用表达式(x.y)。",
        "members": [
            {
                "name": "target",
                "type": "Expression",
                "summary": "获取当前调用的目标部分。"
            },
            {
                "name": "argument",
                "type": "Expression",
                "summary": "获取当前调用的参数部分。"
            },
            {
                "name": "start",
                "body": "return this.target.start;"
            },
            {
                "name": "end",
                "body": "return this.argument.end;"
            }
        ]
    },
    {
        "name": "CallLikeExpression",
        "modifiers": "abstract",
        "extends": "Expression",
        "summary": "表示一个类调用表达式(x(...))。",
        "members": [
            {
                "name": "target",
                "type": "Expression",
                "summary": "获取当前调用的目标部分。"
            },
            {
                "name": "arguments",
                "type": "NodeList<Expression>",
                "summary": "获取当前表达式的所有参数。"
            }
        ]
    },
    {
        "name": "CallExpression",
        "extends": "CallLikeExpression",
        "summary": "表示一个函数调用表达式(x(...))。"
    },
    {
        "name": "NewExpression",
        "extends": "CallLikeExpression",
        "summary": "表示一个 new 表达式(new x(...))。"
    },
    {
        "name": "IndexCallExpression",
        "extends": "CallLikeExpression",
        "summary": "表示一个索引调用表达式(x[...])。",
        "members": [
            {
                "name": "start",
                "body": "return this.target.start;"
            }
        ]
    },
    {
        "name": "UnaryExpression",
        "extends": "Expression",
        "summary": "表示一个一元运算表达式(+x)。",
        "members": [
            {
                "name": "operator",
                "type": "TokenType",
                "summary": "获取当前表达式的运算符。可能的值有：+、-、++、--、!、~、typeof、await。"
            },
            {
                "name": "operand",
                "type": "Expression",
                "summary": "获取当前表达式的运算数。"
            },
            {
                "name": "isPostfix",
                "type": "boolean",
                "summary": "判断当前表达式是否是后缀表达式。",
                "body": "return this.end > this.operand.end;"
            }
        ]
    },
    {
        "name": "BinaryExpression",
        "extends": "Expression",
        "summary": "表示一个二元运算表达式(x + y)。",
        "members": [
            {
                "name": "leftOperand",
                "type": "Expression",
                "summary": "获取当前表达式的左值部分。"
            },
            {
                "name": "operator",
                "type": "TokenType",
                "summary": "获取当前表达式的运算符。合法的值为 +、-、*、/、**、^、%、&、|、&&、||、<<、>>、>>>、is、as、instanceof。"
            },
            {
                "name": "operatorStart",
                "type": "number",
                "summary": "获取运算符的开始位置。"
            },
            {
                "name": "operatorEnd",
                "summary": "获取运算符的结束位置。",
                "body": "return this.operatorStart + tokenToString(this.operator).length;"
            },
            {
                "name": "rightOperand",
                "type": "Expression",
                "summary": "获取当前表达式的右值部分。"
            },
            {
                "name": "start",
                "body": "return this.leftOperand.start;"
            },
            {
                "name": "end",
                "body": "return this.rightOperand.end;"
            }
        ]
    },
    {
        "name": "PredefinedTypeLiteral",
        "extends": "Expression",
        "summary": "表示内置类型字面量(number)。",
        "members": [
            {
                "name": "type",
                "type": "TokenType",
                "summary": "获取字面量所表示的类型。可能的返回值有 void、number、string、boolean、any。"
            }
        ]
    },
    {
        "name": "GenericTypeExpression",
        "extends": "Expression",
        "summary": "表示一个泛型表达式(Array<T>)。",
        "members": [
            {
                "name": "element",
                "type": "Expression",
                "summary": "获取当前泛型表达式的元素部分。"
            },
            {
                "name": "genericArguments",
                "type": "NodeList<Expression>",
                "summary": "获取当前泛型表达式的所有参数。"
            }
        ]
    },
    {
        "name": "ArrayTypeExpression",
        "extends": "Expression",
        "summary": "表示一个数组类型表达式(T[])。",
        "members": [
            {
                "name": "element",
                "type": "Expression",
                "summary": "获取当前数组类型的基础类型。"
            }
        ]
    },
    {
        "name": "TypeDefinition",
        "extends": "MemberContainerDefinition",
        "summary": "表示一个类型（如类、结构、接口）定义。",
        "members": [
            {
                "name": "extends",
                "type": "NodeList<Expression>",
                "summary": "获取当前类型的继承列表。"
            },
            {
                "name": "implements",
                "type": "NodeList<Expression>",
                "summary": "获取当前类型的实现列表。"
            },
            {
                "name": "genericParameters",
                "type": "NodeList<GenericParameterDeclaration>",
                "summary": "获取当前类型定义的泛型形参列表。如果当前定义不是泛型则返回 undefined。"
            }
        ]
    },
    {
        "name": "MemberDefinition",
        "extends": "Node",
        "summary": "表示一个成员（如方法、字段、类、模块等）定义。",
        "members": [
            {
                "name": "annotations",
                "type": "Annotation[]",
                "summary": ""
            },
            {
                "name": "modifiers",
                "type": "Modifiers",
                "summary": "获取当前成员的修饰符。"
            },
            {
                "name": "name",
                "type": "Identifier",
                "summary": "获取当前成员的名字。"
            }
        ]
    },
    {
        "name": "Annotation",
        "extends": "CallLikeExpression",
        "summary": "表示一个注解(@xx(...))。"
    },

    {
        "name": "Modifiers",
        "summary": "表示成员修饰符的枚举。",
        "type": "enum",
        "members": [
            {
                "name": "none",
                "summary": "无修饰符。"
            },
            {
                "name": "static",
                "summary": "表示静态的成员。"
            },
            {
                "name": "final",
                "summary": "表示最终的成员。标记当前类不可被继承、函数不可被重写、字段不可被改变。"
            },
            {
                "name": "new",
                "summary": "表示覆盖的成员。"
            },
            {
                "name": "abstract",
                "summary": "表示抽象的成员。"
            },
            {
                "name": "virtual",
                "summary": "表示虚成员。"
            },
            {
                "name": "override",
                "summary": "表示重写的成员。"
            },
            {
                "name": "declare",
                "summary": "表示外部的成员。"
            },
            {
                "name": "public",
                "summary": "表示公开的成员。"
            },
            {
                "name": "protected",
                "summary": "表示保护的成员。"
            },
            {
                "name": "private",
                "summary": "表示私有的成员。"
            },
            {
                "name": "accessibility",
                "summary": "表示访问修饰符。"
            }
        ]
    },

    {
        "name": "ParameterDeclaration",
        "extends": "Node",
        "summary": "表示一个参数声明。",
        "members": [
            {
                "name": "modifiers",
                "type": "Modifiers",
                "summary": "获取当前参数的修饰符。"
            },
            {
                "name": "annotations",
                "type": "Annotation[]",
                "summary": "获取当前参数的注解。"
            }
        ]
    },
    {
        "name": "GenericParameterDeclaration",
        "extends": "Node",
        "summary": "表示一个泛型参数。",
        "members": [
            {
                "name": "name",
                "type": "Identifier",
                "summary": "获取当前参数的名字。"
            },
            {
                "name": "constraint",
                "type": "Expression",
                "summary": "获取类型约束。"
            }
        ]
    },
    {
        "name": "MemberContainerDefinition",
        "extends": "MemberDefinition",
        "summary": "表示一个可以保存子成员的容器成员定义。",
        "members": [
            {
                "name": "members",
                "type": "MemberDefinition",
                "summary": "获取当前容器内的所有成员。"
            }
        ]
    },
    {
        "name": "ClassDefinition",
        "extends": "TypeDefinition",
        "summary": "表示一个类定义。",
        "members": [ ]
    },
    {
        "name": "StructDefinition",
        "extends": "TypeDefinition",
        "summary": "表示一个结构定义。",
        "members": [ ]
    },
    {
        "name": "InterfaceDefinition",
        "extends": "TypeDefinition",
        "summary": "表示一个接口定义。",
        "members": [ ]
    },
    {
        "name": "EnumDefinition",
        "extends": "TypeDefinition",
        "summary": "表示一个枚举定义。",
        "members": [ ]
    },
    {
        "name": "ExtensionDefinition",
        "extends": "MemberContainerDefinition",
        "summary": "表示一个扩展定义。",
        "members": [
            {
                "name": "targetType",
                "type": "Expression",
                "summary": "获取当前要扩展的目标类型表达式。"
            },
            {
                "name": "baseTypes",
                "type": "Expression[]",
                "summary": "获取当前类型的基类型列表。"
            }
        ]
    },
    {
        "name": "NamespaceDefinition",
        "extends": "MemberContainerDefinition",
        "summary": "表示一个命名空间定义。",
        "members": [
            {
                "name": "names",
                "type": "Identifier[]",
                "summary": "获取当前的命名空间。"
            }
        ]
    },
    {
        "name": "ImportDirective",
        "extends": "Node",
        "summary": "表示一个 import 指令。",
        "members": [
            {
                "name": "next",
                "type": "ImportDirective",
                "summary": "支持多个对象组成一个单链表。"
            },
            {
                "name": "alias",
                "type": "Identifier",
                "summary": "获取当前指令的别名部分。"
            },
            {
                "name": "value",
                "type": "Expression",
                "summary": "获取当前指令的值部分。"
            }
        ]
    },
    {
        "name": "ModuleDefinition",
        "extends": "MemberContainerDefinition",
        "summary": "表示一个模块。",
        "members": [ ]
    },
    {
        "name": "TypeMemberDefinition",
        "extends": "MemberDefinition",
        "summary": "表示一个类型子成员定义。",
        "members": [ ]
    },
    {
        "name": "FieldDefinition",
        "extends": "TypeMemberDefinition",
        "summary": "表示一个字段定义。",
        "members": [
            {
                "name": "variables",
                "type": "VariableDeclaration[]",
                "summary": "获取当前字段的所有变量。"
            }
        ]
    },
    {
        "name": "MethodOrPropertyDefinition",
        "extends": "TypeMemberDefinition",
        "summary": "表示一个方法或属性定义。",
        "members": [
            {
                "name": "returnType",
                "type": "Expression",
                "summary": "获取当前成员的返回类型。"
            },
            {
                "name": "explicitType",
                "type": "Expression",
                "summary": "获取当前成员被显式声明的所有者。"
            }
        ]
    },
    {
        "name": "PropertyOrIndexerDefinition",
        "extends": "MethodOrPropertyDefinition",
        "summary": "表示一个属性或索引器定义。",
        "members": [
            {
                "name": "body",
                "type": "Block",
                "summary": "获取访问器的主体。（可能为 null）"
            }
        ]
    },
    {
        "name": "PropertyDefinition",
        "extends": "MemberDefinition",
        "summary": "表示一个属性定义。",
        "members": [ ]
    },
    {
        "name": "IndexerDefinition",
        "extends": "PropertyOrIndexerDefinition",
        "summary": "表示一个索引器定义。",
        "members": [
            {
                "name": "parameters",
                "type": "ParameterDeclaration",
                "summary": "获取当前定义的参数列表。"
            }
        ]
    },
    {
        "name": "MethodOrConstructorDefinition",
        "extends": "MethodOrPropertyDefinition",
        "summary": "表示一个方法或构造函数定义。",
        "members": [
            {
                "name": "parameters",
                "type": "ParameterDeclaration",
                "summary": "获取当前函数定义的参数列表。"
            },
            {
                "name": "body",
                "type": "Block",
                "summary": "获取当前函数定义的主体。"
            }
        ]
    },
    {
        "name": "MethodDefinition",
        "extends": "MethodOrConstructorDefinition",
        "summary": "表示一个方法定义。",
        "members": [
            {
                "name": "genericParameters",
                "type": "GenericParameterDeclaration[]",
                "summary": "获取成员的泛型参数。"
            }
        ]
    },
    {
        "name": "ConstructorDefinition",
        "extends": "MethodOrConstructorDefinition",
        "summary": "表示一个构造函数定义。",
        "members": [ ]
    },
    {
        "name": "EnumMemberDefinition",
        "extends": "TypeMemberDefinition",
        "summary": "表示一个枚举的成员定义。",
        "members": [
            {
                "name": "initializer",
                "type": "Expression",
                "summary": "获取当前枚举成员的初始化表达式（可能为 null）。"
            }
        ]
    },
    {
        "name": "JsDocComment",
        "extends": "Node",
        "summary": "标识一个 JS 文档注释。",
        "members": [ ]
    }
]