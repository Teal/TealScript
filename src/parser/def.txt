	
语句
----------------------------------------------------------------

Declaration[Yield] :
	FunctionDeclaration[?Yield,?Default] 
	GeneratorDeclaration[?Yield, ?Default]
	ClassDeclaration[?Yield]

声明
----------------------------------------------------------------

源文件
----------------------------------------------------------------

Script :
	ScriptBody[opt]

ScriptBody :
	StatementList

Module :
	ModuleBody[opt]

ModuleBody :
	ModuleItemList

ModuleItemList :
	ModuleItem
	ModuleItemList  ModuleItem

ModuleItem :
	ImportDeclaration
	ExportDeclaration
	StatementListItem

ImportDeclaration :
	import  ImportClause FromClause ;
	import  ModuleSpecifier ;

ImportClause :
	ImportedDefaultBinding
	NameSpaceImport
	NamedImports
	ImportedDefaultBinding , NameSpaceImport
	ImportedDefaultBinding , NamedImports

ImportedDefaultBinding :
	ImportedBinding

NameSpaceImport :
	* as  ImportedBinding

NamedImports :
	{  }
	{  ImportsList }
	{  ImportsList , }

FromClause :
	from ModuleSpecifier

ImportsList :
	ImportSpecifier
	ImportsList ,  ImportSpecifier

ImportSpecifier :
	ImportedBinding
	IdentifierName as  ImportedBinding

ModuleSpecifier :
	StringLiteral

ImportedBinding :
	BindingIdentifier

ExportDeclaration :
	export *  FromClause ; 
	export  ExportClause  FromClause ; 
	export  ExportClause  ; 
	export  VariableStatement  
	export  Declaration   
	export default HoistableDeclaration[Default] 
	export default ClassDeclaration[Default] 
	export default [lookahead ∉ { function, class }]  AssignmentExpression[In] ;

ExportClause :
	{  }
	{  ExportsList }
	{  ExportsList , }

ExportsList :
	ExportSpecifier
	ExportsList ,  ExportSpecifier

ExportSpecifier :
	IdentifierName
	IdentifierName as  IdentifierName

类型
----------------------------------------------------------------

TypeAliasDeclaration:
	type BindingIdentifier TypeParameters[opt] = Type ;

声明
----------------------------------------------------------------

ArrowFormalParameters:	  [Modified]
	CallSignature

Declaration:	  [Modified]…
	InterfaceDeclaration
	TypeAliasDeclaration EnumDeclaration

VariableDeclaration:	  [Modified]
	SimpleVariableDeclaration
	DestructuringVariableDeclaration

SimpleVariableDeclaration:
	BindingIdentifier TypeAnnotation[opt] Initializer[opt]

DestructuringVariableDeclaration:
	BindingPattern TypeAnnotation[opt] Initializer

LexicalBinding:	  
	[Modified]SimpleLexicalBinding
	DestructuringLexicalBinding

SimpleLexicalBinding:
	BindingIdentifier TypeAnnotation[opt] Initializer[opt]

DestructuringLexicalBinding:
	BindingPattern TypeAnnotation[opt] Initializer[opt]

ClassOrInterfaceTypeList:
	ClassOrInterfaceType
	ClassOrInterfaceTypeList , ClassOrInterfaceType

ClassOrInterfaceType:
	TypeReference

SetAccessorIndexMemberDeclaration:
	IndexSignature ;

NamespaceDeclaration:
	namespace IdentifierPath { NamespaceBody }

IdentifierPath:
	BindingIdentifier
	IdentifierPath . BindingIdentifier

NamespaceBody:
	NamespaceElements[opt]

NamespaceElements:
	NamespaceElement
	NamespaceElements NamespaceElement

NamespaceElement:
	Statement
	LexicalDeclaration
	FunctionDeclaration
	GeneratorDeclaration
	ClassDeclaration
	InterfaceDeclaration
	TypeAliasDeclaration
	EnumDeclaration
	NamespaceDeclaration
	AmbientDeclaration
	ImportAliasDeclaration
	ExportNamespaceElement

ExportNamespaceElement:
	export VariableStatement
	export LexicalDeclaration
	export FunctionDeclaration
	export GeneratorDeclaration
	export ClassDeclaration
	export InterfaceDeclaration
	export TypeAliasDeclaration
	export EnumDeclaration
	export NamespaceDeclaration
	export AmbientDeclaration
	export ImportAliasDeclaration

ImportAliasDeclaration:
	import BindingIdentifier = EntityName ;

EntityName:
	NamespaceName
	NamespaceName . IdentifierReference

SourceFile:
	ImplementationSourceFile
	DeclarationSourceFile

ImplementationSourceFile:
	ImplementationScript
	ImplementationModule

DeclarationSourceFile:
	DeclarationScript
	DeclarationModule

ImplementationScript:
	ImplementationScriptElements[opt]

ImplementationScriptElements:
	ImplementationScriptElement
	ImplementationScriptElements ImplementationScriptElement

ImplementationScriptElement:
	ImplementationElement
	AmbientModuleDeclaration

ImplementationElement:
	Statement
	LexicalDeclaration
	FunctionDeclaration
	GeneratorDeclaration
	ClassDeclaration
	InterfaceDeclaration
	TypeAliasDeclaration
	EnumDeclaration
	NamespaceDeclaration
	AmbientDeclaration
	ImportAliasDeclaration

DeclarationScript:
	DeclarationScriptElements[opt]

DeclarationScriptElements:
	DeclarationScriptElement
	DeclarationScriptElements DeclarationScriptElement

DeclarationScriptElement:
	DeclarationElement
	AmbientModuleDeclaration

DeclarationElement:
	InterfaceDeclaration
	TypeAliasDeclaration
	NamespaceDeclaration AmbientDeclaration
	ImportAliasDeclaration

ImplementationModule:
	ImplementationModuleElements[opt]

ImplementationModuleElements:
	ImplementationModuleElement
	ImplementationModuleElements ImplementationModuleElement

ImplementationModuleElement:
	ImplementationElement
	ImportDeclaration
	ImportAliasDeclaration
	ImportRequireDeclaration
	ExportImplementationElement
	ExportDefaultImplementationElement
	ExportListDeclaration ExportAssignment

DeclarationModule:
	DeclarationModuleElements[opt]

DeclarationModuleElements:
	DeclarationModuleElement
	DeclarationModuleElements DeclarationModuleElement

DeclarationModuleElement:
	DeclarationElement
	ImportDeclaration
	ImportAliasDeclaration
	ExportDeclarationElement
	ExportDefaultDeclarationElement
	ExportListDeclaration ExportAssignment

ImportRequireDeclaration:
	import BindingIdentifier = require ( StringLiteral ) ;

ExportImplementationElement:
	export VariableStatement
	export LexicalDeclaration
	export FunctionDeclaration
	export GeneratorDeclaration
	export ClassDeclaration
	export InterfaceDeclaration
	export TypeAliasDeclaration
	export EnumDeclaration
	export NamespaceDeclaration
	export AmbientDeclaration
	export ImportAliasDeclaration

ExportDeclarationElement:
	export InterfaceDeclaration
	export TypeAliasDeclaration
	export AmbientDeclaration
	export ImportAliasDeclaration

ExportDefaultImplementationElement:
	export default FunctionDeclaration
	export default GeneratorDeclaration
	export default ClassDeclaration
	export default AssignmentExpression ;

ExportDefaultDeclarationElement:
	export default AmbientFunctionDeclaration
	export default AmbientClassDeclaration
	export default IdentifierReference ;

ExportListDeclaration:
	export * FromClause ;
	export ExportClause FromClause ;
	export ExportClause ;

ExportAssignment:
	export = IdentifierReference ;

AmbientDeclaration:
	declare AmbientVariableDeclaration
	declare AmbientFunctionDeclaration
	declare AmbientClassDeclaration
	declare AmbientEnumDeclaration
	declare AmbientNamespaceDeclaration

AmbientVariableDeclaration:
	var AmbientBindingList ;
	let AmbientBindingList ;
	const AmbientBindingList ;

AmbientBindingList:
	AmbientBinding
	AmbientBindingList , AmbientBinding

AmbientBinding:
	BindingIdentifier TypeAnnotation[opt]

AmbientFunctionDeclaration:
	function BindingIdentifier CallSignature ;

AmbientClassDeclaration:
	class BindingIdentifier TypeParameters[opt] ClassHeritage { AmbientClassBody }

AmbientClassBody:
	AmbientClassBodyElements[opt]

AmbientClassBodyElements:
	AmbientClassBodyElement
	AmbientClassBodyElements AmbientClassBodyElement

AmbientClassBodyElement:
	AmbientConstructorDeclaration
	AmbientPropertyMemberDeclaration IndexSignature

AmbientConstructorDeclaration:	 
	constructor ( ParameterList[opt] ) ;

AmbientPropertyMemberDeclaration:
	AccessibilityModifier[opt] static[opt] PropertyName TypeAnnotation[opt] ;
	AccessibilityModifier[opt] static[opt] PropertyName CallSignature ;

AmbientEnumDeclaration:
	EnumDeclaration

AmbientNamespaceDeclaration:
	namespace IdentifierPath { AmbientNamespaceBody }

AmbientNamespaceBody:
	AmbientNamespaceElements[opt]

AmbientNamespaceElements:
	AmbientNamespaceElement
	AmbientNamespaceElements AmbientNamespaceElement

AmbientNamespaceElement:
	export[opt] AmbientVariableDeclaration
	export[opt] AmbientLexicalDeclaration
	export[opt] AmbientFunctionDeclaration
	export[opt] AmbientClassDeclaration
	export[opt] InterfaceDeclaration
	export[opt] AmbientEnumDeclaration
	export[opt] AmbientNamespaceDeclaration
	export[opt] ImportAliasDeclaration

AmbientModuleDeclaration:
	declare module StringLiteral {  DeclarationModule }

TealScript 新增
================================================================

TealScript 语法规范
================================================================

词法
----------------------------------------------------------------

SourceCharacter ::
	[any Unicode code point]

InputElementDiv :: 
	WhiteSpace
	LineTerminator
	Comment
	CommonToken
	DivPunctuator
	RightBracePunctuator

InputElementRegExp :: 
	WhiteSpace
	LineTerminator
	Comment
	CommonToken
	RightBracePunctuator
	RegularExpressionLiteral

InputElementRegExpOrTemplateTail ::
	WhiteSpace
	LineTerminator
	Comment
	CommonToken
	RegularExpressionLiteral
	TemplateSubstitutionTail

InputElementTemplateTail ::
	WhiteSpace
	LineTerminator
	Comment
	CommonToken
	DivPunctuator
	TemplateSubstitutionTail

WhiteSpace ::
	<TAB>
	<VT>
	<FF>
	<SP>
	<NBSP>
	<ZWNBSP>
	<USP>

LineTerminator ::
	<LF>
	<CR>
	<LS>
	<PS>

LineTerminatorSequence ::
	<LF>
	<CR> [lookahead ≠ <LF> ]
	<LS>
	<PS>
	<CR> <LF>

Comment ::
	MultiLineComment
	SingleLineComment

MultiLineComment ::
	/* MultiLineCommentChars[opt] */

MultiLineCommentChars ::
	MultiLineNotAsteriskChar MultiLineCommentChars[opt]
	*	PostAsteriskCommentChars[opt]

PostAsteriskCommentChars ::
	MultiLineNotForwardSlashOrAsteriskChar MultiLineCommentChars[opt]
	*	PostAsteriskCommentChars[opt]

MultiLineNotAsteriskChar ::
	SourceCharacter [but not] *

MultiLineNotForwardSlashOrAsteriskChar ::
	SourceCharacter [but not] [one of] / [or] *

SingleLineComment ::
	// SingleLineCommentChars[opt]

SingleLineCommentChars ::
	SingleLineCommentChar SingleLineCommentChars[opt]

SingleLineCommentChar ::
	SourceCharacter [but not] LineTerminator

CommonToken ::
	IdentifierName Punctuator
	NumericLiteral
	StringLiteral
	Template

IdentifierName ::
	IdentifierStart
	IdentifierName IdentifierPart

IdentifierStart ::
	UnicodeIDStart
	$
	_
	\ UnicodeEscapeSequence

IdentifierPart ::
	UnicodeIDContinue
	$
	_
	\ UnicodeEscapeSequence
	<ZWNJ>
	<ZWJ> 	11.6

UnicodeIDStart ::
	[any Unicode code point with the Unicode property “ID_Start” or “Other_ID_Start”]

UnicodeIDContinue ::
	[any Unicode code point with the Unicode property “ID_Continue”, “Other_ID_Continue”, or “Other_ID_Start”]

ReservedWord ::
	Keyword
	FutureReservedWord
	NullLiteral
	BooleanLiteral

Keyword :: [one of]
	break 		do  		in  		typeof
	case 		else 		instanceof  var
	catch 		export  	new 		void
	class  		extends 	return 		while
	const 		finally 	super 		with
	continue 	for 		switch 		yield
	debugger  	function 	this
	default 	if 			throw
	delete 		import 		try

FutureReservedWord :: [one of]
	enum  		await[remark]
	implements 	package 	protected
	interface 	private 	public

Punctuator :: [one of]
	{	} 	( 	) 	[ 	]
	.	; 	, 	< 	> 	<=
	>= 	== 	!= 	=== 	!==
	+ 	- 	* 	% 	++ 	--
	<< 	>> 	>>> 	& 	| 	^
	! 	~ 	&& 	|| 	? 	:
	= 	+= 	-= 	*= 	%= 	<<=
	>>= 	>>>= 	&= 	|= 	^= 	=>

DivPunctuator :: [one of]
	/
	/=

RightBracePunctuator :: [one of]
	}

NullLiteral ::
	null

BooleanLiteral ::
	true
	false

NumericLiteral ::
	DecimalLiteral
	BinaryIntegerLiteral
	OctalIntegerLiteral
	HexIntegerLiteral

DecimalLiteral ::
	DecimalIntegerLiteral . DecimalDigits[opt] ExponentPart[opt]
	. DecimalDigits ExponentPart[opt]
	DecimalIntegerLiteral ExponentPart[opt]

DecimalIntegerLiteral ::
	0
	NonZeroDigit DecimalDigits[opt]

DecimalDigits ::
	DecimalDigit
	DecimalDigits DecimalDigit

DecimalDigit :: [one of]
	0	1  2  3  4  5  6  7  8  9

NonZeroDigit :: [one of]
	1	2  3  4  5  6  7  8  9

ExponentPart ::
	ExponentIndicator SignedInteger

ExponentIndicator :: [one of]
	e  E

SignedInteger ::
	DecimalDigits
	+ DecimalDigits
	- DecimalDigits

BinaryIntegerLiteral ::
	0b BinaryDigits
	0B BinaryDigits

BinaryDigits ::
	BinaryDigit
	BinaryDigits BinaryDigit

BinaryDigit :: [one of]
	0  1

OctalIntegerLiteral ::
	0o OctalDigits
	0O OctalDigits

OctalDigits ::
	OctalDigit
	OctalDigits OctalDigit

OctalDigit :: [one of]
	0  1  2  3  4  5  6  7

HexIntegerLiteral ::
	0x HexDigits
	0X HexDigits

HexDigits ::
	HexDigit
	HexDigits HexDigit

HexDigit :: [one of]
	0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F

StringLiteral ::
	" DoubleStringCharacters[opt] "
	' SingleStringCharacters[opt] '

DoubleStringCharacters ::
	DoubleStringCharacter DoubleStringCharacters[opt]

SingleStringCharacters ::
	SingleStringCharacter SingleStringCharacters[opt]

DoubleStringCharacter ::
	SourceCharacter [but not] [one of] " [or] \ [or] LineTerminator
	\ EscapeSequence
	LineContinuation

SingleStringCharacter ::
	SourceCharacter [but not] [one of] ' [or] \ [or] LineTerminator
	\ EscapeSequence
	LineContinuation

LineContinuation ::
	\ LineTerminatorSequence

EscapeSequence ::
	CharacterEscapeSequence
	0 [lookahead ∉ DecimalDigit]
	HexEscapeSequence
	UnicodeEscapeSequence

CharacterEscapeSequence ::
	SingleEscapeCharacter
	NonEscapeCharacter

SingleEscapeCharacter ::  [one of]
	'  "  \  b  f  n  r  t  v

NonEscapeCharacter ::
	SourceCharacter [but not] [one of] EscapeCharacter [or] LineTerminator

EscapeCharacter ::
	SingleEscapeCharacter DecimalDigit x u

HexEscapeSequence ::
	x HexDigit HexDigit

UnicodeEscapeSequence ::
	u Hex4Digits  u{ HexDigits }

Hex4Digits ::
	HexDigit HexDigit HexDigit HexDigit

RegularExpressionLiteral ::
	/ RegularExpressionBody / RegularExpressionFlags

RegularExpressionBody ::
	RegularExpressionFirstChar RegularExpressionChars

RegularExpressionChars ::
	[empty]
	RegularExpressionChars RegularExpressionChar

RegularExpressionFirstChar ::
	RegularExpressionNonTerminator [but not] [one of] * [or] \ [or] / [or] [
	RegularExpressionBackslashSequence RegularExpressionClass

RegularExpressionChar ::
	RegularExpressionNonTerminator [but not] [one of] \ [or] / [or] [
	RegularExpressionBackslashSequence RegularExpressionClass

RegularExpressionBackslashSequence ::
	\ RegularExpressionNonTerminator

RegularExpressionNonTerminator ::
	SourceCharacter [but not] LineTerminator

RegularExpressionClass ::
	[ RegularExpressionClassChars ]

RegularExpressionClassChars ::
	[empty]
	RegularExpressionClassChars RegularExpressionClassChar

RegularExpressionClassChar ::
	RegularExpressionNonTerminator [but not] [one of] ] [or] \
	RegularExpressionBackslashSequence

RegularExpressionFlags ::
	[empty]
	RegularExpressionFlags IdentifierPart

Template ::
	NoSubstitutionTemplate
	TemplateHead 	11.8.6

NoSubstitutionTemplate ::  
	` TemplateCharacters[opt] `

TemplateHead ::
	` TemplateCharacters[opt] ${

TemplateSubstitutionTail ::
	TemplateMiddle  TemplateTail

TemplateMiddle ::
	} TemplateCharacters[opt] ${

TemplateTail ::
	} TemplateCharacters[opt] `

TemplateCharacters ::
	TemplateCharacter TemplateCharacters[opt]

TemplateCharacter ::
	$ [lookahead ≠ { ]
	\ EscapeSequence
	LineContinuation
	LineTerminatorSequence
	SourceCharacter [but not] [one of] ` [or] \ [or] $ [or] LineTerminator

数字
----------------------------------------------------------------

StringNumericLiteral :::
	StrWhiteSpace[opt]
	StrWhiteSpace[opt] StrNumericLiteral StrWhiteSpace[opt]

StrWhiteSpace :::
	StrWhiteSpaceChar StrWhiteSpace[opt]

StrWhiteSpaceChar ::: WhiteSpace
	LineTerminator

StrNumericLiteral :::
	StrDecimalLiteral
	BinaryIntegerLiteral OctalIntegerLiteral
	HexIntegerLiteral

StrDecimalLiteral :::
	StrUnsignedDecimalLiteral
	+ StrUnsignedDecimalLiteral
	- StrUnsignedDecimalLiteral

StrUnsignedDecimalLiteral :::
	Infinity
	DecimalDigits . DecimalDigits[opt] ExponentPart[opt]
	. DecimalDigits ExponentPart[opt]
	DecimalDigits ExponentPart[opt]

DecimalDigits :::
	DecimalDigit
	DecimalDigits DecimalDigit

DecimalDigit ::: [one of]
	0  1  2  3  4  5  6  7  8  9

ExponentPart :::
	ExponentIndicator SignedInteger

ExponentIndicator ::: [one of]
	e  E

SignedInteger :::
	DecimalDigits
	+ DecimalDigits
	- DecimalDigits

HexIntegerLiteral ::: 0x HexDigit
	0X HexDigit
	HexIntegerLiteral HexDigit

HexDigit ::: [one of]
	0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F

URI
----------------------------------------------------------------

uri :::
	uriCharacters[opt]

uriCharacters :::
	uriCharacter 
	uriCharacters[opt]

uriCharacter ::: 
	uriReserved 
	uriUnescaped 
	uriEscaped

uriReserved ::: [one of]
	;  /  ?  :  ' ' &  =  +  $  ,

uriUnescaped :::
	uriAlpha DecimalDigit uriMark

uriEscaped :::
	% HexDigit HexDigit

uriAlpha ::: [one of]
	a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z

uriMark ::: [one of]
	-  _  .  !  ~  *  '  (  )

正则表达式
----------------------------------------------------------------

Pattern[U] ::
	Disjunction[?U]

Disjunction[U] ::
	Alternative[?U]
	 Alternative[?U] | Disjunction[?U]

Alternative[U] ::
	[empty]
	Alternative[?U] Term[?U]

Term[U] ::
	Assertion[?U]
	Atom[?U]
	Atom[?U] Quantifier

Assertion[U] ::
	^
	$
	\ b
	\ B
	( ? = Disjunction[?U] )
	( ? ! Disjunction[?U] )

Quantifier ::
	QuantifierPrefix
	QuantifierPrefix ?

QuantifierPrefix ::
	*
	+ ?
	{ DecimalDigits }
	{ DecimalDigits , }
	{ DecimalDigits , DecimalDigits }

Atom[U] ::
	PatternCharacter .
	\ AtomEscape[?U] CharacterClass[?U]
	( Disjunction[?U] )
	( ? : Disjunction[?U] )

SyntaxCharacter :: [one of]
	^  $  \  .  *  +  ?  (  )  [  ]  {  }  |

PatternCharacter ::
	SourceCharacter [but not] SyntaxCharacter

AtomEscape[U] ::  
	DecimalEscape
	CharacterEscape[?U]
	CharacterClassEscape

CharacterEscape[U] ::  
	ControlEscape c ControlLetter
	HexEscapeSequence
	RegExpUnicodeEscapeSequence[?U]
	IdentityEscape[?U]

ControlEscape ::  [one of]
	f  n  r  t  v

ControlLetter :: [one of]
	a  b  c  d  e  f  g  h  i  j  k  
	l  m  n  o  p  q  r  s  t  u  v  
	w  x  y  z 
	A  B  C  D  E  F  G  H  I  J  K  
	L  M  N  O  P  Q  R  S  T  U  V  
	W  X  Y  Z

RegExpUnicodeEscapeSequence[U]  ::
	[+U] u LeadSurrogate \u TrailSurrogate
	[+U] u LeadSurrogate
	[+U] u TrailSurrogate
	[+U] u NonSurrogate
	[~U] u Hex4Digits
	[+U] u{ HexDigits }

LeadSurrogate  ::
	Hex4Digits [match only if the SV of Hex4Digits is in the inclusive range 0xD800 to 0xDBFF]

TrailSurrogate  ::
	Hex4Digits [match only if the SV of Hex4Digits is in the inclusive range 0xDC00 to 0xDFFF]

NonSurrogate  ::
	Hex4Digits [match only if the SV of Hex4Digits is not in the inclusive range 0xD800 to 0xDFFF]

IdentityEscape[U] ::
	[+U] SyntaxCharacter
	[+U]  /
	[~U] SourceCharacter [but not] UnicodeIDContinue

DecimalEscape ::
	DecimalIntegerLiteral  [lookahead ∉ DecimalDigit]

CharacterClassEscape ::  [one of]
	d  D  s  S  w  W

CharacterClass[U]  ::
	[ [lookahead ∉ {^}] ClassRanges[?U] ]
	[ ^ ClassRanges[?U] ]

ClassRanges[U] ::
	[empty]
	NonemptyClassRanges[?U]

NonemptyClassRanges[U] ::
	ClassAtom[?U]
	ClassAtom[?U]  NonemptyClassRangesNoDash[?U]
	ClassAtom[?U] - ClassAtom[?U] ClassRanges[?U]

NonemptyClassRangesNoDash[U] ::
	ClassAtom[?U]
	ClassAtomNoDash[?U] NonemptyClassRangesNoDash[?U]
	ClassAtomNoDash[?U] - ClassAtom[?U] ClassRanges[?U]

ClassAtom[U] ::
	-
	ClassAtomNoDash[?U]

ClassAtomNoDash[U] ::
	SourceCharacter  [but not] [one of] \ [or] ] [or] -
	\ ClassEscape[?U]

ClassEscape[U] ::
	DecimalEscape b
	[+U] -
	CharacterEscape[?U]
	CharacterClassEscape

TypeScript 新增
================================================================
