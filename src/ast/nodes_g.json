[
    {
        "name": "Node",
        "summary": "表示一个语法树节点。",
        "members": [
            {
                "name": "start",
                "type": "number",
                "summary": "获取当前节点的开始位置。如果当前节点是生成的则返回 undefined。"
            },
            {
                "name": "end",
                "type": "number",
                "summary": "获取当前节点的结束位置。如果当前节点是生成的则返回 undefined。"
            },
            {
                "name": "parent",
                "type": "Node",
                "summary": "获取当前节点的父节点。如果未启用转换，则使用返回 undefined。"
            },
            {
                "name": "findParent",
                "summary": "搜索指定类型的父节点。\r\n     * @param nodeType 要查找的父类型。",
                "body": "let p = this.parent;\r\n        while (p) {\r\n            if (p.constructor === nodeType) {\r\n                return p as T;\r\n            }\r\n            p = p.parent;\r\n        }"
            },
            {
                "name": "module",
                "summary": "获取当前节点的父模块。\r\n     * @returns 返回模块。",
                "body": "return this.findParent<Module>(Module);"
            },
            {
                "name": "resolve",
                "summary": "对当前节点进行转换。",
                "body": ""
            },
            {
                "name": "emit",
                "summary": "输出当前节点。",
                "body": ""
            }
        ]
    },
    {
        "name": "Variable",
        "extends": "Node",
        "summary": "表示一个变量。",
        "members": [
            {
                "name": "variableType",
                "type": "VariableType",
                "summary": "获取当前变量的变量类型。"
            },
            {
                "name": "type",
                "type": "Expression",
                "summary": "获取当前变量的类型。"
            },
            {
                "name": "name",
                "type": "Identifier",
                "summary": "获取当前变量的名字。"
            },
            {
                "name": "initialiser",
                "type": "Expression",
                "summary": "获取当前变量的初始值。"
            }
        ]
    },
    {
        "name": "VariableType",
        "summary": "对变量类型的枚举。",
        "type": "enum",
        "members": [
            {
                "name": "normalLocal",
                "summary": "表示这是一个普通变量。"
            },
            {
                "name": "constLocal",
                "summary": "表示这是一个常量。"
            },
            {
                "name": "staticLocal",
                "summary": "表示这是一个静态变量。"
            },
            {
                "name": "finalLocal",
                "summary": "表示这是一个静态最终变量。"
            },
            {
                "name": "externLocal",
                "summary": "表示这是一个寄存变量。"
            },
            {
                "name": "volatileLocal",
                "summary": "表示这是一个易变变量。"
            },
            {
                "name": "outLocal",
                "summary": "表示这是一个外部变量。"
            },
            {
                "name": "refLocal",
                "summary": "表示这是一个引用变量。"
            },
            {
                "name": "PARAMETER",
                "summary": "标记为变量。"
            },
            {
                "name": "inParameter",
                "summary": "表示这是一个输入参数。"
            },
            {
                "name": "outParameter",
                "summary": "表示这是一个输出参数。"
            },
            {
                "name": "refParameter",
                "summary": "表示这是一个引用参数。"
            },
            {
                "name": "paramsParameter",
                "summary": "表示这是一个可变参数。"
            },
            {
                "name": "argListParameter",
                "summary": "表示这是一个参数列表。"
            }
        ]
    },
    {
        "name": "Module",
        "extends": "Node",
        "summary": "表示一个模块(即一个源文件)。",
        "members": [
            {
                "name": "start",
                "summary": "获取当前节点的开始位置。如果当前节点是生成的则返回 undefined。",
                "body": "return 0;"
            },
            {
                "name": "end",
                "summary": "获取当前节点的结束位置。如果当前节点是生成的则返回 undefined。",
                "body": "return this.text.length;"
            },
            {
                "name": "text",
                "type": "string",
                "summary": "获取或设置当前模块的源码。"
            },
            {
                "name": "importDirectives",
                "type": "ImportDirective",
                "summary": "获取当前单元内的导入列表。"
            }
        ]
    },
    {
        "name": "Statement",
        "extends": "Node",
        "summary": "表示一个语句。",
        "members": []
    },
    {
        "name": "EmptyStatement",
        "extends": "Statement",
        "summary": "表示一个空语句(;)。",
        "members": [
            {
                "name": "end",
                "summary": "获取当前节点的结束位置。如果当前节点是生成的则返回 undefined。",
                "body": "return this.start + 1;"
            }
        ]
    },
    {
        "name": "Block",
        "extends": "Statement",
        "summary": "表示一个语句块({...})。",
        "members": [
            {
                "name": "statements",
                "type": "Statement[]",
                "summary": "获取当前块内的所有语句。"
            }
        ]
    },
    {
        "name": "VariableStatement",
        "extends": "Statement",
        "summary": "表示一个变量声明语句(var xx = ...)。",
        "members": [
            {
                "name": "variables",
                "type": "Variable[]",
                "summary": "获取当前语句的所有变量。"
            }
        ]
    },
    {
        "name": "LabeledStatement",
        "extends": "Statement",
        "summary": "表示一个标签语句。",
        "members": [
            {
                "name": "label",
                "type": "Identifier",
                "summary": "获取当前的标签。"
            },
            {
                "name": "body",
                "type": "Statement",
                "summary": "获取当前的主要语句。"
            }
        ]
    },
    {
        "name": "ExpressionStatement",
        "extends": "Statement",
        "summary": "表示一个表达式语句。",
        "members": [
            {
                "name": "body",
                "type": "Expression",
                "summary": "获取当前表达式语句的主体。"
            }
        ]
    },
    {
        "name": "IfStatement",
        "extends": "Statement",
        "summary": "表示一个 if 语句。",
        "members": [
            {
                "name": "condition",
                "type": "Expression",
                "summary": "获取条件部分。"
            },
            {
                "name": "thenClause",
                "type": "Statement",
                "summary": "获取当前的则的部分。"
            },
            {
                "name": "elseClause",
                "type": "Statement",
                "summary": "获取当前的否则的部分。"
            },
            {
                "name": "end",
                "summary": "获取当前节点的结束位置。如果当前节点是生成的则返回 undefined。",
                "body": "return (this.elseClause || this.thenClause).end;"
            }
        ]
    },
    {
        "name": "SwitchStatement",
        "extends": "Statement",
        "summary": "表示一个 switch 语句。",
        "members": [
            {
                "name": "condition",
                "type": "Expression",
                "summary": "获取判断的条件。"
            },
            {
                "name": "caseClauses",
                "type": "{\r\n\r\n        /**\r\n         * 获取当前 case 的标签。如果标签是 null，表示是 else 分支。\r\n         */\r\n        label: Expression;\r\n\r\n        /**\r\n         * 获取当前的全部语句。如果 body 是 null，表示当前 case 是一个直接贯穿的 case 。\r\n         */\r\n        body: Block;\r\n\r\n    }[]",
                "summary": "获取全部选项。"
            }
        ]
    },
    {
        "name": "ForStatement",
        "extends": "Statement",
        "summary": "表示一个 for 语句。",
        "members": [
            {
                "name": "initializer",
                "type": "Node",
                "summary": "获取初始化语句。"
            },
            {
                "name": "condition",
                "type": "Expression",
                "summary": "获取条件部分。"
            },
            {
                "name": "iterator",
                "type": "Expression",
                "summary": "获取下一次语句。"
            },
            {
                "name": "body",
                "type": "Statement",
                "summary": "获取主体部分。"
            }
        ]
    },
    {
        "name": "ForInStatement",
        "extends": "Statement",
        "summary": "表示一个 for in 语句。",
        "members": [
            {
                "name": "variable",
                "type": "Variable",
                "summary": "获取全部变量。"
            },
            {
                "name": "iterator",
                "type": "Expression",
                "summary": "获取目标表达式。"
            },
            {
                "name": "body",
                "type": "Statement",
                "summary": "获取主体部分。"
            }
        ]
    },
    {
        "name": "ForOfStatement",
        "extends": "Statement",
        "summary": "表示一个 for of 语句。",
        "members": [
            {
                "name": "variable",
                "type": "Variable",
                "summary": "获取循环的目标表达式。"
            },
            {
                "name": "target",
                "type": "Expression",
                "summary": "获取结束表达式。"
            },
            {
                "name": "iterator",
                "type": "Expression",
                "summary": "获取下一次语句。"
            },
            {
                "name": "body",
                "type": "Statement",
                "summary": "获取主体部分。"
            }
        ]
    },
    {
        "name": "WhileStatement",
        "extends": "Statement",
        "summary": "表示一个 while 语句。",
        "members": [
            {
                "name": "condition",
                "type": "Expression",
                "summary": "获取条件部分。"
            },
            {
                "name": "body",
                "type": "Statement",
                "summary": "获取主体部分。"
            },
            {
                "name": "end",
                "summary": "获取当前节点的结束位置。如果当前节点是生成的则返回 undefined。",
                "body": "return this.body.end;"
            }
        ]
    },
    {
        "name": "DoWhileStatement",
        "extends": "Statement",
        "summary": "表示一个 do while 语句。",
        "members": [
            {
                "name": "condition",
                "type": "Expression",
                "summary": "获取条件部分。"
            },
            {
                "name": "body",
                "type": "Statement",
                "summary": "获取主体部分。"
            }
        ]
    },
    {
        "name": "ContinueStatement",
        "extends": "Statement",
        "summary": "表示一个 continue 语句。",
        "members": [
            {
                "name": "label",
                "type": "Identifier",
                "summary": "获取当前跳转换的标签。"
            }
        ]
    },
    {
        "name": "BreakStatement",
        "extends": "Statement",
        "summary": "表示一个 break 语句。",
        "members": [
            {
                "name": "label",
                "type": "Identifier",
                "summary": "获取当前跳转换的标签。"
            }
        ]
    },
    {
        "name": "ReturnStatement",
        "extends": "Statement",
        "summary": "表示一个 return 语句。",
        "members": [
            {
                "name": "value",
                "type": "Expression",
                "summary": "获取返回的表达式。"
            }
        ]
    },
    {
        "name": "ThrowStatement",
        "extends": "Statement",
        "summary": "表示一个 throw 语句。",
        "members": [
            {
                "name": "value",
                "type": "Expression",
                "summary": "获取表达式。"
            }
        ]
    },
    {
        "name": "TryStatement",
        "extends": "Statement",
        "summary": "表示一个 try 语句。",
        "members": [
            {
                "name": "tryClause",
                "type": "Statement",
                "summary": "获取 try 语句块。"
            },
            {
                "name": "catchClause",
                "type": "{\r\n\r\n        /**\r\n         * 获取当前捕获的异常类型。\r\n         */\r\n        variable: Variable;\r\n\r\n        /**\r\n         * 当前块的主体。\r\n         */\r\n        body: Statement;\r\n\r\n    }",
                "summary": "获取当前的所有 catch 块。"
            },
            {
                "name": "finallyClause",
                "type": "Statement",
                "summary": "获取 finally 语句块。"
            }
        ]
    },
    {
        "name": "WithStatement",
        "extends": "Statement",
        "summary": "表示一个 with 语句。",
        "members": [
            {
                "name": "target",
                "type": "Node",
                "summary": "获取当前的目标表达式。"
            },
            {
                "name": "body",
                "type": "Statement",
                "summary": "获取主体部分。"
            }
        ]
    },
    {
        "name": "Expression",
        "extends": "Node",
        "summary": "表示一个表达式。",
        "members": [
            {
                "name": "parent",
                "type": "Expression | Statement",
                "summary": "获取当前节点的父节点。如果未启用转换，则使用返回 undefined。"
            },
            {
                "name": "statement",
                "summary": "获取当前节点的父模块。\r\n     * @returns 返回模块。",
                "body": "return this.findParent<Statement>(Statement);"
            },
            {
                "name": "resolvedType",
                "type": "TypeSymbol",
                "summary": "获取当前表达式的返回类型。如果分析错误，则返回 undefined。"
            },
            {
                "name": "constantValue",
                "type": "any",
                "summary": "如果当前表达式是常量则返回其值。"
            },
            {
                "name": "isConstant",
                "summary": "判断当前表达式是否是常量值。",
                "body": "return 'constantValue' in this;"
            }
        ]
    },
    {
        "name": "Identifier",
        "extends": "Expression",
        "summary": "表示一个标识符。",
        "members": [
            {
                "name": "_value",
                "type": "string",
                "summary": "存储当前标识符的内容。"
            },
            {
                "name": "value",
                "summary": "获取当前标识符的内容。",
                "body": "if (this._value == undefined) {\r\n            return this.module.text.substring(this.start, this.end);\r\n        }\r\n        return this._value;"
            },
            {
                "name": "value",
                "summary": "设置当前标识符的内容。",
                "body": "this._value = value;"
            },
            {
                "name": "resolvedType",
                "summary": "获取当前表达式的返回类型。如果分析错误，则返回 undefined。",
                "body": "if (!this.parent) return undefined;\r\n\r\n        // 标识符的使用场景有：\r\n        switch (this.parent.constructor) {\r\n            case LabeledStatement:\r\n                return undefined;\r\n        }"
            }
        ]
    },
    {
        "name": "PredefinedTypeLiteral",
        "extends": "Expression",
        "summary": "表示内置类型字面量。",
        "members": [
            {
                "name": "type",
                "type": "TokenType",
                "summary": "获取常量的类型。可能的值为 var void int ..."
            }
        ]
    },
    {
        "name": "NullLiteral",
        "extends": "Expression",
        "summary": "表示 null 常量。",
        "members": []
    },
    {
        "name": "TrueLiteral",
        "extends": "Expression",
        "summary": "表示 true 常量。",
        "members": [
            {
                "name": "resolvedType",
                "summary": "获取当前表达式的返回类型。如果分析错误，则返回 undefined。",
                "body": "return getPredefinedType(\"boolean\");"
            },
            {
                "name": "constantValue",
                "summary": "如果当前表达式是常量则返回其值。",
                "body": "return true;"
            }
        ]
    },
    {
        "name": "FalseLiteral",
        "extends": "Expression",
        "summary": "表示 false 常量。",
        "members": [
            {
                "name": "resolvedType",
                "summary": "获取当前表达式的返回类型。如果分析错误，则返回 undefined。",
                "body": "return getPredefinedType(\"boolean\");"
            },
            {
                "name": "constantValue",
                "summary": "如果当前表达式是常量则返回其值。",
                "body": "return true;"
            }
        ]
    },
    {
        "name": "NumericLiteral",
        "extends": "Expression",
        "summary": "表示一个浮点数常量。",
        "members": [
            {
                "name": "_value",
                "type": "number",
                "summary": "存储当前标识符的内容。"
            },
            {
                "name": "value",
                "summary": "获取当前标识符的内容。",
                "body": "if (this._value == undefined) {\r\n            //return parseFloat(this.module.text.substring(this.start, this.end));\r\n        }\r\n        return this._value;"
            },
            {
                "name": "value",
                "summary": "设置当前标识符的内容。",
                "body": "this._value = value;"
            }
        ]
    },
    {
        "name": "StringLiteral",
        "extends": "Expression",
        "summary": "表示一个字符串常量。",
        "members": [
            {
                "name": "_value",
                "type": "string",
                "summary": "存储当前标识符的内容。"
            },
            {
                "name": "value",
                "summary": "获取当前标识符的内容。",
                "body": "if (this._value == undefined) {\r\n            return this.module.text.substring(this.start, this.end);\r\n        }\r\n        return this._value;"
            },
            {
                "name": "value",
                "summary": "设置当前标识符的内容。",
                "body": "this._value = value;"
            }
        ]
    },
    {
        "name": "ArrayLiteral",
        "extends": "Expression",
        "summary": "表示一个列表字面量。",
        "members": [
            {
                "name": "values",
                "type": "Expression[]",
                "summary": "获取当前表达式的值列表。"
            }
        ]
    },
    {
        "name": "ObjectLiteral",
        "extends": "Expression",
        "summary": "表示一个字典字面量。",
        "members": [
            {
                "name": "values",
                "type": "{\r\n\r\n        /**\r\n         * 获取属性的键。\r\n         */\r\n        key: Expression;\r\n\r\n        /**\r\n         * 获取属性的值。\r\n         */\r\n        value: Expression;\r\n\r\n    }[]",
                "summary": "获取当前表达式的值列表。"
            }
        ]
    },
    {
        "name": "ThisLiteral",
        "extends": "Expression",
        "summary": "表示 this 常量。",
        "members": []
    },
    {
        "name": "SuperLiteral",
        "extends": "Expression",
        "summary": "表示 super 常量。",
        "members": []
    },
    {
        "name": "LambdaLiteral",
        "extends": "Expression",
        "summary": "表示一个函数表达式。",
        "members": [
            {
                "name": "parameters",
                "type": "Parameter[]",
                "summary": "获取当前函数定义的参数列表。"
            },
            {
                "name": "returnBody",
                "type": "Expression",
                "summary": "获取当前函数的主体表达式部分。"
            },
            {
                "name": "body",
                "type": "Block",
                "summary": "获取当前函数的主体部分。"
            }
        ]
    },
    {
        "name": "ParenthesizedExpression",
        "extends": "Expression",
        "summary": "表示一个括号表达式。",
        "members": [
            {
                "name": "body",
                "type": "Expression",
                "summary": "获取当前表达式的主体。"
            }
        ]
    },
    {
        "name": "CommaExpression",
        "extends": "Expression",
        "summary": "表示一组逗号隔开的表达式。",
        "members": [
            {
                "name": "left",
                "type": "Expression",
                "summary": "获取左边部分的表达式。"
            },
            {
                "name": "right",
                "type": "Expression",
                "summary": "获取右边部分的表达式。"
            }
        ]
    },
    {
        "name": "YieldExpression",
        "extends": "Statement",
        "summary": "表示一个 yield 表达式。",
        "members": [
            {
                "name": "value",
                "type": "Expression",
                "summary": "获取返回的表达式。"
            },
            {
                "name": "end",
                "summary": "获取当前节点的结束位置。如果当前节点是生成的则返回 undefined。",
                "body": "return this.value ? this.value.end : this.start + 5;"
            },
            {
                "name": "asterisk",
                "summary": "",
                "body": "return this.asteriskStart != undefined;"
            },
            {
                "name": "asteriskStart",
                "type": "number",
                "summary": ""
            },
            {
                "name": "asteriskEnd",
                "summary": "",
                "body": "return this.asteriskStart != undefined ? this.asteriskStart + 1 : undefined;"
            },
            {
                "summary": ""
            }
        ]
    },
    {
        "name": "ConditionalExpression",
        "extends": "Expression",
        "summary": "表示一个三元条件表达式。",
        "members": [
            {
                "name": "condition",
                "type": "Expression",
                "summary": "获取当前表达式的条件。"
            },
            {
                "name": "thenExpression",
                "type": "Expression",
                "summary": "获取当前表达式的则部分。"
            },
            {
                "name": "elseExpression",
                "type": "Expression",
                "summary": "获取当前表达式的否则部分。"
            }
        ]
    },
    {
        "name": "CastExpression",
        "extends": "Expression",
        "summary": "表示一个类型分析表达式。",
        "members": [
            {
                "name": "targetType",
                "type": "Expression",
                "summary": "获取当前表达式的主体。"
            },
            {
                "name": "body",
                "type": "Expression",
                "summary": "获取当前表达式的主体。"
            }
        ]
    },
    {
        "name": "GenericTypeExpression",
        "extends": "Expression",
        "summary": "表示一个泛型表达式。",
        "members": [
            {
                "name": "elementType",
                "type": "Identifier",
                "summary": "获取当前泛型表达式的基础部分。"
            },
            {
                "name": "genericArguments",
                "type": "Expression[]",
                "summary": "获取当前泛型表达式的泛型参数。"
            }
        ]
    },
    {
        "name": "ArrayTypeExpression",
        "extends": "Expression",
        "summary": "表示一个数组类型表达式。",
        "members": [
            {
                "name": "elementType",
                "type": "Expression",
                "summary": "获取当前类型的基础类型。"
            }
        ]
    },
    {
        "name": "MemberCallExpression",
        "extends": "Expression",
        "summary": "表示一个成员调用表达式。",
        "members": [
            {
                "name": "target",
                "type": "Expression",
                "summary": "获取当前调用的目标表达式。"
            },
            {
                "name": "argument",
                "type": "Expression",
                "summary": "获取当前调用的参数表达式。"
            }
        ]
    },
    {
        "name": "FuncCallExpression",
        "extends": "Expression",
        "summary": "表示一个函数调用表达式。",
        "members": [
            {
                "name": "arguments",
                "type": "Expression[]",
                "summary": "获取当前调用的参数列表。"
            }
        ]
    },
    {
        "name": "NewExpression",
        "extends": "FuncCallExpression",
        "summary": "表示一个 new 表达式。",
        "members": [
            {
                "name": "initializer",
                "type": "Expression",
                "summary": "获取当前表达式的初始化项。"
            }
        ]
    },
    {
        "name": "IndexCallExpression",
        "extends": "FuncCallExpression",
        "summary": "表示一个索引调用表达式。",
        "members": []
    },
    {
        "name": "ChainCallExpression",
        "extends": "MemberCallExpression",
        "summary": "表示一个链式成员访问表达式。",
        "members": []
    },
    {
        "name": "UnaryExpression",
        "extends": "Expression",
        "summary": "表示一个一元运算表达式。",
        "members": [
            {
                "name": "operator",
                "type": "TokenType",
                "summary": "获取当前表达式的运算符。可能的合法值是：+ - ! ^~ &amp; typeof await 。"
            },
            {
                "name": "operand",
                "type": "Expression",
                "summary": "获取当前表达式的运算数。"
            }
        ]
    },
    {
        "name": "TypeOrSizeOfExpression",
        "extends": "Expression",
        "summary": "表示一个 typeof 或 sizeof 表达式。",
        "members": [
            {
                "name": "operand",
                "type": "Expression",
                "summary": "获取当前表达式的运算数。"
            }
        ]
    },
    {
        "name": "TypeOfExpression",
        "extends": "TypeOrSizeOfExpression",
        "summary": "表示一个 typeof 表达式。",
        "members": []
    },
    {
        "name": "MutatorExpression",
        "extends": "UnaryExpression",
        "summary": "表示一个 ++ 或 -- 运算表达式。",
        "members": [
            {
                "name": "prefix",
                "type": "boolean",
                "summary": "判断当前表达式是否是前缀表达式。"
            }
        ]
    },
    {
        "name": "BinaryExpression",
        "extends": "Expression",
        "summary": "表示一个二元运算表达式。",
        "members": [
            {
                "name": "leftOperand",
                "type": "Expression",
                "summary": "获取当前表达式的左值。"
            },
            {
                "name": "operator",
                "type": "TokenType",
                "summary": "获取当前表达式的运算符。合法的值为 +、-、*、/、**、^、%、&、|、&&、||、<<、>>、>>>、is、as、instanceof。"
            },
            {
                "name": "rightOperand",
                "type": "Expression",
                "summary": "获取当前表达式的右值。"
            },
            {
                "name": "operatorStart",
                "type": "number",
                "summary": "获取运算符的开始位置。如果当前节点是生成的则返回 undefined。"
            },
            {
                "name": "operatorEnd",
                "summary": "获取运算符的结束位置。如果当前节点是生成的则返回 undefined。",
                "body": "return this.operatorStart + tokenToString(this.operator).length;"
            },
            {
                "name": "start",
                "summary": "获取当前节点的开始位置。如果当前节点是生成的则返回 undefined。",
                "body": "return this.leftOperand.start;"
            },
            {
                "name": "end",
                "summary": "获取当前节点的结束位置。如果当前节点是生成的则返回 undefined。",
                "body": "return this.rightOperand.end;"
            }
        ]
    },
    {
        "name": "IsOrAsExpression",
        "extends": "Expression",
        "summary": "表示一个 is 或 as 表达式。",
        "members": [
            {
                "name": "leftOperand",
                "type": "Expression",
                "summary": "获取当前表达式的左值。"
            },
            {
                "name": "rightOperand",
                "type": "Expression",
                "summary": "获取当前表达式的右值。"
            }
        ]
    },
    {
        "name": "InstanceofExpression",
        "extends": "IsOrAsExpression",
        "summary": "表示一个 instanceof 表达式。",
        "members": []
    },
    {
        "name": "AsExpression",
        "extends": "IsOrAsExpression",
        "summary": "表示一个 as 表达式。",
        "members": []
    },
    {
        "name": "MemberDefinition",
        "extends": "Node",
        "summary": "表示一个成员（如方法、字段、类、模块等）定义。",
        "members": [
            {
                "name": "annotations",
                "type": "FuncCallExpression[]",
                "summary": ""
            },
            {
                "name": "modifiers",
                "type": "Modifiers",
                "summary": "获取当前成员的修饰符。"
            },
            {
                "name": "name",
                "type": "Identifier",
                "summary": "获取当前成员的名字。"
            }
        ]
    },
    {
        "name": "Modifiers",
        "summary": "表示成员修饰符的枚举。",
        "type": "enum",
        "members": [
            {
                "name": "none",
                "summary": "无修饰符。"
            },
            {
                "name": "static",
                "summary": "表示静态的成员。"
            },
            {
                "name": "final",
                "summary": "表示最终的成员。标记当前类不可被继承、函数不可被重写、字段不可被改变。"
            },
            {
                "name": "new",
                "summary": "表示覆盖的成员。"
            },
            {
                "name": "abstract",
                "summary": "表示抽象的成员。"
            },
            {
                "name": "virtual",
                "summary": "表示虚成员。"
            },
            {
                "name": "override",
                "summary": "表示重写的成员。"
            },
            {
                "name": "declare",
                "summary": "表示外部的成员。"
            },
            {
                "name": "public",
                "summary": "表示公开的成员。"
            },
            {
                "name": "protected",
                "summary": "表示保护的成员。"
            },
            {
                "name": "private",
                "summary": "表示私有的成员。"
            },
            {
                "name": "accessibility",
                "summary": "表示访问修饰符。"
            }
        ]
    },
    {
        "name": "Parameter",
        "extends": "Variable",
        "summary": "表示一个函数参数。",
        "members": []
    },
    {
        "name": "GenericParameter",
        "extends": "Node",
        "summary": "表示一个泛型参数。",
        "members": [
            {
                "name": "name",
                "type": "Identifier",
                "summary": "获取当前参数的名字。"
            },
            {
                "name": "constraint",
                "type": "Expression",
                "summary": "获取类型约束。"
            }
        ]
    },
    {
        "name": "MemberContainerDefinition",
        "extends": "MemberDefinition",
        "summary": "表示一个可以保存子成员的容器成员定义。",
        "members": [
            {
                "name": "members",
                "type": "MemberDefinition",
                "summary": "获取当前容器内的所有成员。"
            }
        ]
    },
    {
        "name": "TypeDefinition",
        "extends": "MemberContainerDefinition",
        "summary": "表示一个类型（如类、结构、接口）定义。",
        "members": [
            {
                "name": "baseTypes",
                "type": "Expression[]",
                "summary": "获取当前类型的基类型列表。"
            },
            {
                "name": "genericParameters",
                "type": "GenericParameter",
                "summary": "获取当前类型的泛型形参列表。非泛型则返回 null 。"
            }
        ]
    },
    {
        "name": "ClassDefinition",
        "extends": "TypeDefinition",
        "summary": "表示一个类定义。",
        "members": []
    },
    {
        "name": "StructDefinition",
        "extends": "TypeDefinition",
        "summary": "表示一个结构定义。",
        "members": []
    },
    {
        "name": "InterfaceDefinition",
        "extends": "TypeDefinition",
        "summary": "表示一个接口定义。",
        "members": []
    },
    {
        "name": "EnumDefinition",
        "extends": "TypeDefinition",
        "summary": "表示一个枚举定义。",
        "members": []
    },
    {
        "name": "ExtensionDefinition",
        "extends": "MemberContainerDefinition",
        "summary": "表示一个扩展定义。",
        "members": [
            {
                "name": "targetType",
                "type": "Expression",
                "summary": "获取当前要扩展的目标类型表达式。"
            },
            {
                "name": "baseTypes",
                "type": "Expression[]",
                "summary": "获取当前类型的基类型列表。"
            }
        ]
    },
    {
        "name": "NamespaceDefinition",
        "extends": "MemberContainerDefinition",
        "summary": "表示一个命名空间定义。",
        "members": [
            {
                "name": "names",
                "type": "Identifier[]",
                "summary": "获取当前的命名空间。"
            }
        ]
    },
    {
        "name": "ImportDirective",
        "extends": "Node",
        "summary": "表示一个 import 指令。",
        "members": [
            {
                "name": "next",
                "type": "ImportDirective",
                "summary": "支持多个对象组成一个单链表。"
            },
            {
                "name": "alias",
                "type": "Identifier",
                "summary": "获取当前指令的别名部分。"
            },
            {
                "name": "value",
                "type": "Expression",
                "summary": "获取当前指令的值部分。"
            }
        ]
    },
    {
        "name": "ModuleDefinition",
        "extends": "MemberContainerDefinition",
        "summary": "表示一个模块。",
        "members": []
    },
    {
        "name": "TypeMemberDefinition",
        "extends": "MemberDefinition",
        "summary": "表示一个类型子成员定义。",
        "members": []
    },
    {
        "name": "FieldDefinition",
        "extends": "TypeMemberDefinition",
        "summary": "表示一个字段定义。",
        "members": [
            {
                "name": "variables",
                "type": "Variable[]",
                "summary": "获取当前字段的所有变量。"
            }
        ]
    },
    {
        "name": "MethodOrPropertyDefinition",
        "extends": "TypeMemberDefinition",
        "summary": "表示一个方法或属性定义。",
        "members": [
            {
                "name": "returnType",
                "type": "Expression",
                "summary": "获取当前成员的返回类型。"
            },
            {
                "name": "explicitType",
                "type": "Expression",
                "summary": "获取当前成员被显式声明的所有者。"
            }
        ]
    },
    {
        "name": "PropertyOrIndexerDefinition",
        "extends": "MethodOrPropertyDefinition",
        "summary": "表示一个属性或索引器定义。",
        "members": [
            {
                "name": "body",
                "type": "Block",
                "summary": "获取访问器的主体。（可能为 null）"
            }
        ]
    },
    {
        "name": "PropertyDefinition",
        "extends": "MemberDefinition",
        "summary": "表示一个属性定义。",
        "members": []
    },
    {
        "name": "IndexerDefinition",
        "extends": "PropertyOrIndexerDefinition",
        "summary": "表示一个索引器定义。",
        "members": [
            {
                "name": "parameters",
                "type": "Parameter",
                "summary": "获取当前定义的参数列表。"
            }
        ]
    },
    {
        "name": "MethodOrConstructorDefinition",
        "extends": "MethodOrPropertyDefinition",
        "summary": "表示一个方法或构造函数定义。",
        "members": [
            {
                "name": "parameters",
                "type": "Parameter",
                "summary": "获取当前函数定义的参数列表。"
            },
            {
                "name": "body",
                "type": "Block",
                "summary": "获取当前函数定义的主体。"
            }
        ]
    },
    {
        "name": "MethodDefinition",
        "extends": "MethodOrConstructorDefinition",
        "summary": "表示一个方法定义。",
        "members": [
            {
                "name": "genericParameters",
                "type": "GenericParameter[]",
                "summary": "获取成员的泛型参数。"
            }
        ]
    },
    {
        "name": "ConstructorDefinition",
        "extends": "MethodOrConstructorDefinition",
        "summary": "表示一个构造函数定义。",
        "members": []
    },
    {
        "name": "EnumMemberDefinition",
        "extends": "TypeMemberDefinition",
        "summary": "表示一个枚举的成员定义。",
        "members": [
            {
                "name": "initializer",
                "type": "Expression",
                "summary": "获取当前枚举成员的初始化表达式（可能为 null）。"
            }
        ]
    },
    {
        "name": "JsDocComment",
        "extends": "Node",
        "summary": "标识一个 JS 文档注释。",
        "members": []
    }
]